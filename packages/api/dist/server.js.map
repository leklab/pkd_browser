{"version":3,"file":"server.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,qDAAqD;AACrD,QAAQ;AACR;AACA,QAAQ;AACR,4EAA4E;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,qBAAqB;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;AC1KA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS,qBAAqB,WAAW;AACzD;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA,iEAAe,qBAAqB;;;;;;;;;;;;;;;AChDpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA,iEAAe,iCAAiC;;;;;;;;;;;;;;;;ACtBJ;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA,cAAc,qDAAgB;AAC9B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,mCAAmC;;;;;;;;;;;;;;;;;AC9DmB;AACJ;;AAEjE,0DAA0D,qBAAqB;AAC/E,qBAAqB,+EAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,WAAW;AACX,SAAS;AACT,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA,2BAA2B,sEAA6B;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,mCAAmC;;;;;;;;;;;;;;;;;AChEmB;AACJ;;AAEjE;AACA;AACA,IAAI;AACJ;AACA,qBAAqB,+EAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA,SAAS;AACT,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,sEAA6B;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,GAAG;AACH;;AAEA,iEAAe,qCAAqC;;;;;;;;;;;;;;;;AC5HpD,WAAW,mBAAmB;AAC9B,WAAW,qCAAqC;AAChD,WAAW,UAAU;AACA;;AAErB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C,0CAA0C;AAC1C,oEAAoE;AACpE,mDAAmD;;AAEnD;AACA;AACA;AACA,0CAA0C;AAC1C,0CAA0C;AAC1C,mDAAmD;AACnD,KAAK;;AAEL,GAAG;;AAEH;AACA;AACA;AACA,UAAU,2BAA2B;;AAErC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C,gBAAgB,SAAS,IAAI,cAAc,aAAa,WAAW;AACnE;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;;AAEH;AACA,WAAW;AACX;AACA;AACA;;AAEA,WAAW;;;AAGX;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,sCAAsC;AAC5C;AACA,MAAM,oFAAoF;AAC1F;;AAEA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,SAAS;AACnC,kBAAkB,QAAQ,OAAO;AACjC,kBAAkB,SAAS,IAAI,cAAc,aAAa,WAAW;AACrE;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B,cAAc,QAAQ,OAAO;AAC7B,cAAc,SAAS,cAAc,WAAW;AAChD;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B,cAAc,QAAQ,OAAO;AAC7B;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;;AAGH;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;AAIA;;AAEA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,QAAQ;;AAER;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;;;;AAKA;;;AAGA,UAAU,aAAa;;;AAGvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,uBAAuB;;;;;;;;;;;;;;;;;;;;ACrX+B;AACL;AACb;;AAEnD,WAAW,UAAU;AACrB;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;;AAE+D;AACZ;;;AAGnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,sBAAsB;AAC5C;AACA,SAAS;AACT,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,0BAA0B,gEAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,wBAAwB,0EAAuB;;AAE/C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;;AAGH,qBAAqB,+EAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAgD;AAC5E,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf,gBAAgB,QAAQ,wBAAwB;AAChD,gBAAgB,SAAS,UAAU,WAAW;AAC9C;AACA,WAAW;AACX,SAAS;AACT,iBAAiB,OAAO,gBAAgB;AACxC,OAAO;AACP,KAAK;;AAEL;AACA;;;AAGA,iCAAiC,oEAAuB,GAAG,sBAAsB;;AAEjF,yBAAyB,+EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAgD;AAC5E,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf,gBAAgB,QAAQ,wBAAwB;AAChD,gBAAgB,SAAS,UAAU,WAAW;AAC9C;AACA,WAAW;AACX,SAAS;AACT,iBAAiB,OAAO,gBAAgB;AACxC,OAAO;AACP,KAAK;;;;AAIL,mCAAmC,oEAAuB,GAAG,sBAAsB;;AAEnF,sBAAsB,8DAAiB;;AAEvC;AACA;AACA;;AAEA;;AAEA,iEAAe,uBAAuB;;;;;;;;;;;;;;;;ACrOtC,WAAW,mBAAmB;AAC9B,WAAW,qCAAqC;AAChD,WAAW,UAAU;AACrB;AACqB;;AAErB;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C,0CAA0C;AAC1C,oEAAoE;AACpE,mDAAmD;;AAEnD;AACA;AACA;AACA,0CAA0C;AAC1C,0CAA0C;AAC1C,mDAAmD;AACnD,KAAK;;AAEL,GAAG;;AAEH;AACA;AACA;AACA,UAAU,2BAA2B;;AAErC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM,sCAAsC;AAC5C;AACA,MAAM,oFAAoF;AAC1F;AACA;;AAEA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,yBAAyB;AACrD,oBAAoB,SAAS,IAAI,cAAc,aAAa,WAAW;AACvE;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA,8BAA8B,gDAAgD;AAC9E;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C,gBAAgB,SAAS,IAAI,cAAc,aAAa,WAAW;AACnE;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C,gBAAgB,SAAS,IAAI,cAAc,aAAa,WAAW;AACnE;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C,gBAAgB,SAAS,IAAI,cAAc,aAAa,WAAW;AACnE;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,sCAAsC;AAC5C;AACA,MAAM,oFAAoF;AAC1F;;AAEA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,SAAS;AACnC,kBAAkB,QAAQ,OAAO;AACjC,kBAAkB,SAAS,IAAI,cAAc,aAAa,WAAW;AACrE;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B,cAAc,QAAQ,OAAO;AAC7B,cAAc,SAAS,cAAc,WAAW;AAChD;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B,cAAc,QAAQ,OAAO;AAC7B;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;AAIA;;AAEA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,QAAQ;;;AAGR;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;;;;AAKA;AACA,YAAY,wBAAwB;;;AAGpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA,YAAY,uCAAuC;AACnD;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,yBAAyB;AAC/C;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;;AAEX;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;AC96BmC;AACL;AACb;;AAEnD,WAAW,UAAU;;AAES;AAC9B;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAE6E;AACE;AAC9B;AACkB;;;AAGnE;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;AAGA;;AAEA,qBAAqB,+EAAqB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,oBAAoB;AAC1C;AACA,SAAS;AACT,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA,0BAA0B,gEAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,wBAAwB,0EAAuB;;AAE/C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH,qBAAqB,+EAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAgD;AAC5E,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf,gBAAgB,QAAQ,wBAAwB;AAChD,kBAAkB,SAAS,cAAc,WAAW;AACpD,gBAAgB,SAAS,UAAU,WAAW;AAC9C;AACA;AACA,WAAW;AACX,SAAS;AACT,iBAAiB,OAAO,gBAAgB;AACxC,OAAO;AACP,KAAK;;;AAGL;AACA,iCAAiC,sEAAyB,GAAG,sBAAsB;AACnF;;;AAGA;;AAEA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,iDAAK;AACjC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,MAAM;;AAEN,2BAA2B,uEAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,iEAAe,mBAAmB;;;;;;;;;;;;;;;;;;;;AC3MmC;AACpB;AACjD,WAAW,UAAU;;AAErB;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACmE;AACY;AACF;;AAE7E,4CAA4C,oBAAoB;;;AAGhE,qBAAqB,+EAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAgD;AAC5E,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf,gBAAgB,QAAQ,wBAAwB;AAChD,gBAAgB,SAAS,cAAc,WAAW;AAClD;AACA,WAAW;AACX,SAAS;AACT,iBAAiB,OAAO,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,cAAc,SAAS,cAAc,WAAW;AAChD;AACA,SAAS;AACT,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL,GAAG;;AAEH,iCAAiC,sEAAyB,GAAG,eAAe;AAC5E;;AAEA,sBAAsB,+EAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA,SAAS;AACT,OAAO;AACP,eAAe,OAAO,gBAAgB;AACtC,KAAK;AACL,GAAG;;AAEH,mCAAmC,sEAAyB,GAAG,eAAe;AAC9E;;AAEA,iCAAiC,wEAAmC;;;;AAIpE;AACA,oBAAoB,MAAM,UAAU,KAAK,YAAY,MAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM,sCAAsC;AAC5C;AACA,MAAM,oFAAoF;AAC1F;;AAEA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mBAAmB;AACnB,iBAAiB;AACjB,kBAAkB,SAAS,IAAI,OAAO,aAAa,WAAW;AAC9D;AACA,aAAa;AACb,WAAW;AACX,mBAAmB,OAAO,gBAAgB;AAC1C,SAAS;AACT,OAAO;;AAEP,0DAA0D,gBAAgB;AAC1E,KAAK;AACL;;AAEA;;AAEA;AACA;AACA,MAAM,4DAA4D;AAClE;AACA;;AAEA;AACA;AACA;;AAEA,iEAAe,qBAAqB;;;;;;;;;;;;;;;;;;ACtQpB;;;AAGT,2BAA2B,sDAAiB;AACnD;AACA;AACA,UAAU,MAAM,kDAAa,EAAE;AAC/B,UAAU,MAAM,+CAAU,EAAE;AAC5B,cAAc,MAAM,+CAAU,EAAE;AAChC,cAAc,MAAM,+CAAU,EAAE;AAChC,GAAG;AACH,CAAC;;;AAGM,2BAA2B,sDAAiB;AACnD;AACA;AACA,UAAU,MAAM,kDAAa,EAAE;AAC/B,UAAU,MAAM,+CAAU,EAAE;AAC5B,cAAc,MAAM,+CAAU,EAAE;AAChC,cAAc,MAAM,+CAAU,EAAE;AAChC,GAAG;AACH,CAAC;;;;;;;;;;;;;;;AC5BD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,mCAAmC;;;;;;;;;;;;;;;AClElD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,gCAAgC;;;;;;;;;;;;;;;AClE/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,kCAAkC;;;;;;;;;;;;;;;AChKjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,gBAAgB;;;;;;;;;;;;;;;AClE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,wBAAwB;;;;;;;;;;;;;;;ACZvC;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,aAAa;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mFAAmF;AACnF;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qFAAqF;AACrF;AACA,SAAS;AACT,OAAO;;AAEP,MAAM;;AAEN,GAAG;;AAEH,CAAC;;AAED;AACA,iEAAe,yBAAyB;;;;;;;;;;;;;;;AC/LxC;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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AO;AACP,KAAK;AACL;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD,OAAO;AACP;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,gBAAgB,gDAAW,CAAC,4EAA4B;AACxD,yCAAyC,2FAAqC;AAC9E,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,gDAAW,CAAC,wDAAkB;AAC9C;AACA;AACA,mBAAmB,6DAA6D;AAChF,OAAO;AACP;AACA;AACA;AACA;;AAEA,0CAA0C,2EAAqB;;AAE/D;AACA,gBAAgB,yDAAgB;AAChC,oFAAoF,iCAAiC;AACrH;AACA;AACA,eAAe,2EAAqB;AACpC,OAAO;AACP,KAAK;AACL;AACA,GAAG;AACH,CAAC;;AAED,iEAAe,UAAU;;;;;;;;;;;;;;;;;;;;;;;;AC1GiD;AACrC;;AAE9B,6BAA6B,sDAAiB;AACrD;AACA;AACA,aAAa,UAAU,mDAAc,CAAC,kDAAa,GAAG;AACtD,WAAW,UAAU,mDAAc,CAAC,kDAAa,GAAG;AACpD,GAAG;AACH,CAAC;;AAED;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,YAAY,MAAM,GAAG,MAAM,GAAG,IAAI;AAClC;;AAEA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC,OAAO;AACP;AACA;;AAEA,4BAA4B,YAAY,oDAAY,sBAAsB;;AAE1E;AACA;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;;AAEA;AACA,gBAAgB,cAAc,GAAG,qBAAqB;AA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","sources":["webpack://@broad/api/../../node_modules/whatwg-fetch/fetch.js","webpack://@broad/api/./src/pcgc_schema/datasets/GnomadConstraintType.js","webpack://@broad/api/./src/pcgc_schema/datasets/GnomadStructuralVariantDetailsType.js","webpack://@broad/api/./src/pcgc_schema/datasets/MitoVariantDetailsType.js","webpack://@broad/api/./src/pcgc_schema/datasets/VariantDetailsType.js","webpack://@broad/api/./src/pcgc_schema/datasets/clinvar.js","webpack://@broad/api/./src/pcgc_schema/datasets/countVariantsInRegion.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchGnomadConstraintByTranscript.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchGnomadStructuralVariantDetails.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchGnomadStructuralVariantsByGene.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchGnomadStructuralVariantsByRegion.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchMitoVariantDetails.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchMitoVariantsByGene.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchVariantDetails.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchVariantsByGene.js","webpack://@broad/api/./src/pcgc_schema/datasets/fetchVariantsByRegion.js","webpack://@broad/api/./src/pcgc_schema/datasets/haplogroups.js","webpack://@broad/api/./src/pcgc_schema/datasets/mergeExomeAndGenomeVariants.js","webpack://@broad/api/./src/pcgc_schema/datasets/mergeMitoVariants.js","webpack://@broad/api/./src/pcgc_schema/datasets/mergePcgcAndGnomadVariants.js","webpack://@broad/api/./src/pcgc_schema/datasets/mergeSSCVariants.js","webpack://@broad/api/./src/pcgc_schema/datasets/rankedSVGeneConsequences.js","webpack://@broad/api/./src/pcgc_schema/datasets/shapeGnomadVariantSummary.js","webpack://@broad/api/./src/pcgc_schema/datasets/shapeMitoVariantSummary.js","webpack://@broad/api/./src/pcgc_schema/datasets/transcriptConsequence.js","webpack://@broad/api/./src/pcgc_schema/errors.js","webpack://@broad/api/./src/pcgc_schema/index.js","webpack://@broad/api/./src/pcgc_schema/types/exon.js","webpack://@broad/api/./src/pcgc_schema/types/gene.js","webpack://@broad/api/./src/pcgc_schema/types/gtex.js","webpack://@broad/api/./src/pcgc_schema/types/mito_gene.js","webpack://@broad/api/./src/pcgc_schema/types/mito_variant.js","webpack://@broad/api/./src/pcgc_schema/types/region.js","webpack://@broad/api/./src/pcgc_schema/types/search.js","webpack://@broad/api/./src/pcgc_schema/types/structuralVariant.js","webpack://@broad/api/./src/pcgc_schema/types/transcript.js","webpack://@broad/api/./src/pcgc_schema/types/variant.js","webpack://@broad/api/./src/utilities/elasticsearch.js","webpack://@broad/api/./src/utilities/redis.js","webpack://@broad/api/./src/utilities/region.js","webpack://@broad/api/./src/utilities/variant.js","webpack://@broad/api/external commonjs \"compression\"","webpack://@broad/api/external commonjs \"cors\"","webpack://@broad/api/external commonjs \"elasticsearch\"","webpack://@broad/api/external commonjs \"express\"","webpack://@broad/api/external commonjs \"express-graphql\"","webpack://@broad/api/external commonjs \"graphql\"","webpack://@broad/api/external commonjs \"graphql-disable-introspection\"","webpack://@broad/api/external commonjs \"ioredis\"","webpack://@broad/api/external commonjs \"lodash\"","webpack://@broad/api/external commonjs \"mongodb\"","webpack://@broad/api/external commonjs \"node-fetch\"","webpack://@broad/api/external commonjs \"serve-static\"","webpack://@broad/api/webpack/bootstrap","webpack://@broad/api/webpack/runtime/compat get default export","webpack://@broad/api/webpack/runtime/define property getters","webpack://@broad/api/webpack/runtime/hasOwnProperty shorthand","webpack://@broad/api/webpack/runtime/make namespace object","webpack://@broad/api/./src/server.js"],"sourcesContent":["var global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nexport function Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nexport function Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nexport function Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nexport var DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nexport function fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n","import { GraphQLFloat, GraphQLInt, GraphQLList, GraphQLObjectType, GraphQLString } from 'graphql'\n\nconst GnomadConstraintType = new GraphQLObjectType({\n  name: 'GnomADConstraint',\n  fields: {\n    // Expected\n    exp_lof: { type: GraphQLFloat },\n    exp_mis: { type: GraphQLFloat },\n    exp_syn: { type: GraphQLFloat },\n    // Observed\n    obs_lof: { type: GraphQLInt },\n    obs_mis: { type: GraphQLInt },\n    obs_syn: { type: GraphQLInt },\n    // Observed/Expected\n    oe_lof: { type: GraphQLFloat },\n    oe_lof_lower: { type: GraphQLFloat },\n    oe_lof_upper: { type: GraphQLFloat },\n    oe_mis: { type: GraphQLFloat },\n    oe_mis_lower: { type: GraphQLFloat },\n    oe_mis_upper: { type: GraphQLFloat },\n    oe_syn: { type: GraphQLFloat },\n    oe_syn_lower: { type: GraphQLFloat },\n    oe_syn_upper: { type: GraphQLFloat },\n    // Z\n    lof_z: { type: GraphQLFloat },\n    mis_z: { type: GraphQLFloat },\n    syn_z: { type: GraphQLFloat },\n    // Other\n    gene_issues: { type: new GraphQLList(GraphQLString) },\n    pLI: { type: GraphQLFloat },\n    pNull: { type: GraphQLFloat },\n    pRec: { type: GraphQLFloat },\n  },\n})\n\nexport default GnomadConstraintType\n","import {\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\nconst GnomadStructuralVariantPopulationDataType = new GraphQLObjectType({\n  name: 'GnomadStructuralVariantPopulationData',\n  fields: {\n    id: { type: new GraphQLNonNull(GraphQLString) },\n    ac: { type: new GraphQLNonNull(GraphQLInt) },\n    an: { type: new GraphQLNonNull(GraphQLInt) },\n    ac_hom: { type: GraphQLInt },\n  },\n})\n\nconst GnomadStructuralVariantConsequenceType = new GraphQLObjectType({\n  name: 'GnomadStructuralVariantConsequence',\n  fields: {\n    consequence: { type: new GraphQLNonNull(GraphQLString) },\n    genes: { type: new GraphQLList(GraphQLString) },\n  },\n})\n\nconst GnomadStructuralVariantCopyNumberDataType = new GraphQLObjectType({\n  name: 'GnomadStructuralVariantCopyNumberData',\n  fields: {\n    copy_number: { type: new GraphQLNonNull(GraphQLInt) },\n    ac: { type: new GraphQLNonNull(GraphQLInt) },\n  },\n})\n\nconst GnomadStructuralVariantDetailsType = new GraphQLObjectType({\n  name: 'GnomadStructuralVariantDetails',\n  fields: {\n    algorithms: { type: new GraphQLList(GraphQLString) },\n    alts: { type: new GraphQLList(GraphQLString) },\n    ac: { type: GraphQLInt },\n    ac_hom: { type: GraphQLInt },\n    an: { type: GraphQLInt },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    consequences: { type: new GraphQLList(GnomadStructuralVariantConsequenceType) },\n    copy_numbers: { type: new GraphQLList(GnomadStructuralVariantCopyNumberDataType) },\n    cpx_intervals: { type: new GraphQLList(GraphQLString) },\n    cpx_type: { type: GraphQLString },\n    end_chrom: { type: new GraphQLNonNull(GraphQLString) },\n    end_pos: { type: new GraphQLNonNull(GraphQLInt) },\n    evidence: { type: new GraphQLList(GraphQLString) },\n    filters: { type: new GraphQLList(GraphQLString) },\n    genes: { type: new GraphQLList(GraphQLString) },\n    length: { type: GraphQLInt },\n    populations: { type: new GraphQLList(GnomadStructuralVariantPopulationDataType) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    qual: { type: GraphQLFloat },\n    type: { type: GraphQLString },\n    variant_id: { type: GraphQLString },\n  },\n})\n\nexport default GnomadStructuralVariantDetailsType\n","import {\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\n//import { UserVisibleError } from '../../errors'\nimport { MitoVariantInterface } from '../types/mito_variant'\n//import { resolveReads, ReadDataType } from '../shared/reads'\nimport { TranscriptConsequenceType } from './transcriptConsequence'\nimport { HaplogroupType } from './haplogroups'\nimport { PopulationType } from './haplogroups'\n//import { MultiNucleotideVariantSummaryType } from './gnomadMultiNucleotideVariants'\n\n\n/*\nconst PopulationType = new GraphQLObjectType({\n  name: 'VariantPopulation',\n  fields: {\n    id: { type: new GraphQLNonNull(GraphQLString) },\n    ac: { type: new GraphQLNonNull(GraphQLInt) },\n    an: { type: new GraphQLNonNull(GraphQLInt) },\n    ac_hemi: { type: new GraphQLNonNull(GraphQLInt) },\n    ac_hom: { type: new GraphQLNonNull(GraphQLInt) },\n    //subpopulations: { type: new GraphQLList(GnomadSubpopulationType) },\n  },\n})\n*/\n\nconst MitoVariantDetailsType = new GraphQLObjectType({\n  name: 'MitoVariantDetails',\n  interfaces: [MitoVariantInterface],\n  fields: {\n    // variant interface fields\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n\n    //colocatedVariants: { type: new GraphQLList(GraphQLString) },\n        \n    //flags: { type: new GraphQLList(GraphQLString) },\n    spark_genome: {\n      type: new GraphQLObjectType({\n        name: 'MitoVariantDetailsGenomeData',\n        fields: {\n          ac: { type: GraphQLInt },\n          an: { type: GraphQLInt },\n          ac_het: { type: GraphQLInt },\n          ac_hom: { type: GraphQLInt },\n          max_heteroplasmy: {type: GraphQLFloat }          \n        },\n      }),\n    },\n\n    ssc_genome: {\n      type: new GraphQLObjectType({\n        name: 'MitoVariantDetailsGenomeDataX',\n        fields: {\n          ac: { type: GraphQLInt },\n          an: { type: GraphQLInt },\n          ac_het: { type: GraphQLInt },\n          ac_hom: { type: GraphQLInt },\n          max_heteroplasmy: {type: GraphQLFloat }          \n        },\n      }),\n    },\n    \n    sortedTranscriptConsequences: { type: new GraphQLList(TranscriptConsequenceType) },\n    haplogroups: { type: new GraphQLList(HaplogroupType)},\n    populations: { type: new GraphQLList(PopulationType)},\n\n  },\n  isTypeOf: variantData => variantData.gqlType === 'MitoVariantDetails',\n})\n\nexport default MitoVariantDetailsType\n","import {\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\n//import { UserVisibleError } from '../../errors'\nimport { VariantInterface } from '../types/variant'\n//import { resolveReads, ReadDataType } from '../shared/reads'\nimport { TranscriptConsequenceType } from './transcriptConsequence'\n//import { MultiNucleotideVariantSummaryType } from './gnomadMultiNucleotideVariants'\n\n\nconst HistogramType = new GraphQLObjectType({\n  name: 'Histogram',\n  fields: {\n    bin_edges: { type: new GraphQLList(GraphQLFloat) },\n    bin_freq: { type: new GraphQLList(GraphQLFloat) },\n    n_larger: { type: GraphQLInt },\n    n_smaller: { type: GraphQLInt },\n  },\n})\n\n/*\nconst GnomadSubpopulationType = new GraphQLObjectType({\n  name: 'GnomadVariantSubpopulation',\n  fields: {\n    id: { type: new GraphQLNonNull(GraphQLString) },\n    ac: { type: new GraphQLNonNull(GraphQLInt) },\n    an: { type: new GraphQLNonNull(GraphQLInt) },\n    ac_hom: { type: new GraphQLNonNull(GraphQLInt) },\n  },\n})\n*/\n\nconst PopulationType = new GraphQLObjectType({\n  name: 'VariantPopulation',\n  fields: {\n    id: { type: new GraphQLNonNull(GraphQLString) },\n    ac: { type: new GraphQLNonNull(GraphQLInt) },\n    an: { type: new GraphQLNonNull(GraphQLInt) },\n    ac_hemi: { type: new GraphQLNonNull(GraphQLInt) },\n    ac_hom: { type: new GraphQLNonNull(GraphQLInt) },\n    //subpopulations: { type: new GraphQLList(GnomadSubpopulationType) },\n  },\n})\n\n/*\nconst VariantGenotypeQuality = new GraphQLObjectType({\n  name: 'VariantGenotypeQuality',\n  fields: {\n    bin_edges: { type: new GraphQLList(GraphQLFloat)},\n    bin_freq: { type: new GraphQLList(GraphQLFloat)},\n    n_larger: { type: GraphQLInt},\n    n_smaller: { type: GraphQLInt}\n  }\n})\n*/\n\nconst InSilicoPredictorsType = new GraphQLObjectType({\n  name: 'InSilicoPredictors',\n  fields: {\n    cadd: { type: GraphQLFloat},\n    splice_ai: { type: GraphQLFloat},\n    revel: { type: GraphQLString},\n    primate_ai: { type: GraphQLFloat},\n  }\n})\n\nconst MayoVariantType = new GraphQLObjectType({\n  name: 'MayoVariant',\n  fields: {\n    variant_id: { type: GraphQLInt},\n    MayoVariantID: { type: GraphQLInt},    \n    VariantTypeName: { type: GraphQLString},\n    ClinicalSignificanceShortName: { type: GraphQLString},\n  }\n})\n\n\nconst GnomadVariantQualityMetricsType = new GraphQLObjectType({\n  name: 'GnomadVariantQualityMetrics',\n  fields: {\n    \n    alleleBalance: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantAlleleBalance',\n        fields: {\n          alt: { type: HistogramType },\n        },\n      }),\n    },\n    genotypeDepth: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantGenotypeDepth',\n        fields: {\n          all: { type: HistogramType },\n          alt: { type: HistogramType },\n        },\n      }),\n    },    \n    genotypeQuality: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantGenotypeQuality',\n        fields: {\n          all: { type: HistogramType },\n          alt: { type: HistogramType },\n        },\n      }),\n    },\n    /*\n    siteQualityMetrics: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantSiteQualityMetrics',\n        fields: {\n          BaseQRankSum: { type: GraphQLFloat },\n          ClippingRankSum: { type: GraphQLFloat },\n          DP: { type: GraphQLInt },\n          FS: { type: GraphQLFloat },\n          InbreedingCoeff: { type: GraphQLFloat },\n          MQ: { type: GraphQLFloat },\n          MQRankSum: { type: GraphQLFloat },\n          pab_max: { type: GraphQLFloat },\n          QD: { type: GraphQLFloat },\n          ReadPosRankSum: { type: GraphQLFloat },\n          RF: { type: GraphQLFloat },\n          SiteQuality: { type: GraphQLFloat },\n          SOR: { type: GraphQLFloat },\n          VQSLOD: { type: GraphQLFloat },\n        },\n      }),\n    },*/\n  },\n})\n\n/*\nconst GnomadVariantFilteringAlleleFrequencyType = new GraphQLObjectType({\n  name: 'GnomadVariantFilteringAlleleFrequency',\n  fields: {\n    popmax: { type: GraphQLFloat },\n    popmax_population: { type: GraphQLString },\n  },\n})\n\n*/\n\n//const GnomadVariantDetailsType = new GraphQLObjectType({\n//  name: 'GnomadVariantDetails',\n\nconst VariantDetailsType = new GraphQLObjectType({\n  name: 'VariantDetails',\n  interfaces: [VariantInterface],\n  fields: {\n    // variant interface fields\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n\n    /*\n    // gnomAD specific fields\n    age_distribution: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantDetailsAgeDistribution',\n        fields: {\n          het: { type: HistogramType },\n          hom: { type: HistogramType },\n        },\n      }),\n    },\n    \n    multiNucleotideVariants: { type: new GraphQLList(MultiNucleotideVariantSummaryType) },\n    */\n\n    colocatedVariants: { type: new GraphQLList(GraphQLString) },\n    gnomadPopFreq: { type: new GraphQLList(PopulationType) },\n    gnomadAF: {type: GraphQLFloat},\n    \n    bpkd_exome: {\n      type: new GraphQLObjectType({\n        name: 'VariantDetailsExomeData',\n        fields: {\n          ac: { type: GraphQLInt },\n          an: { type: GraphQLInt },\n          //ac_hemi: { type: GraphQLInt },\n          ac_hom: { type: GraphQLInt },\n\n\n          ac_male: { type: GraphQLInt },\n          an_male: { type: GraphQLInt },\n          ac_male_hom: { type: GraphQLInt },\n\n          ac_female: { type: GraphQLInt },\n          an_female: { type: GraphQLInt },\n          ac_female_hom: { type: GraphQLInt },\n                \n          //faf95: { type: GnomadVariantFilteringAlleleFrequencyType },\n          //faf99: { type: GnomadVariantFilteringAlleleFrequencyType },\n          //filters: { type: new GraphQLList(GraphQLString) },\n          populations: { type: new GraphQLList(PopulationType) },\n          /*\n          qualityMetrics: {\n            genotype_quality: { type: VariantGenotypeQuality}\n          }\n         */ \n          \n          qualityMetrics: { type: GnomadVariantQualityMetricsType },\n          /*\n          reads: {\n            type: new GraphQLList(ReadDataType),\n            resolve: async obj => {\n              if (!process.env.READS_DIR) {\n                return null\n              }\n              try {\n                return await resolveReads(\n                  process.env.READS_DIR,\n                  'gnomad_r2_1/combined_bams_exomes',\n                  obj\n                )\n              } catch (err) {\n                throw new UserVisibleError('Unable to load reads data')\n              }\n            },\n          },*/\n        },\n      }),\n    },\n\n\n    /*\n    spark_exome: {\n      type: new GraphQLObjectType({\n        name: 'VariantDetailsExomeData',\n        fields: {\n          ac: { type: GraphQLInt },\n          an: { type: GraphQLInt },\n          //ac_hemi: { type: GraphQLInt },\n          ac_hom: { type: GraphQLInt },\n\n\n          ac_male: { type: GraphQLInt },\n          an_male: { type: GraphQLInt },\n          ac_male_hom: { type: GraphQLInt },\n\n          ac_female: { type: GraphQLInt },\n          an_female: { type: GraphQLInt },\n          ac_female_hom: { type: GraphQLInt },\n                \n          //faf95: { type: GnomadVariantFilteringAlleleFrequencyType },\n          //faf99: { type: GnomadVariantFilteringAlleleFrequencyType },\n          //filters: { type: new GraphQLList(GraphQLString) },\n          populations: { type: new GraphQLList(PopulationType) },\n          \n          qualityMetrics: {\n            genotype_quality: { type: VariantGenotypeQuality}\n          }\n          \n          \n          qualityMetrics: { type: GnomadVariantQualityMetricsType },\n          \n          reads: {\n            type: new GraphQLList(ReadDataType),\n            resolve: async obj => {\n              if (!process.env.READS_DIR) {\n                return null\n              }\n              try {\n                return await resolveReads(\n                  process.env.READS_DIR,\n                  'gnomad_r2_1/combined_bams_exomes',\n                  obj\n                )\n              } catch (err) {\n                throw new UserVisibleError('Unable to load reads data')\n              }\n            },\n          },\n        },\n      }),\n    },\n    \n    \n    //flags: { type: new GraphQLList(GraphQLString) },\n    spark_genome: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantDetailsGenomeData',\n        fields: {\n          ac: { type: GraphQLInt },\n          an: { type: GraphQLInt },\n          // ac_hemi: { type: GraphQLInt },\n          ac_hom: { type: GraphQLInt },\n          // faf95: { type: GnomadVariantFilteringAlleleFrequencyType },\n          // faf99: { type: GnomadVariantFilteringAlleleFrequencyType },\n          // filters: { type: new GraphQLList(GraphQLString) },\n\n\n          ac_male: { type: GraphQLInt },\n          an_male: { type: GraphQLInt },\n          ac_male_hom: { type: GraphQLInt },\n\n          ac_female: { type: GraphQLInt },\n          an_female: { type: GraphQLInt },\n          ac_female_hom: { type: GraphQLInt },\n\n          populations: { type: new GraphQLList(PopulationType) },\n          \n          \n          qualityMetrics: { type: GnomadVariantQualityMetricsType },\n          reads: {\n            type: new GraphQLList(ReadDataType),\n            resolve: async obj => {\n              if (!process.env.READS_DIR) {\n                return null\n              }\n              try {\n                return await resolveReads(\n                  process.env.READS_DIR,\n                  'gnomad_r2_1/combined_bams_genomes',\n                  obj\n                )\n              } catch (err) {\n                throw new UserVisibleError('Unable to load reads data')\n              }\n            },\n          },\n        },\n      }),\n    },\n\n    \n    ssc_genome: {\n      type: new GraphQLObjectType({\n        name: 'GnomadVariantDetailsGenomeDataX',\n        fields: {\n          ac: { type: GraphQLInt },\n          an: { type: GraphQLInt },\n          ac_hom: { type: GraphQLInt },\n          ac_male: { type: GraphQLInt },\n          an_male: { type: GraphQLInt },\n          ac_male_hom: { type: GraphQLInt },\n\n          ac_female: { type: GraphQLInt },\n          an_female: { type: GraphQLInt },\n          ac_female_hom: { type: GraphQLInt },\n\n          populations: { type: new GraphQLList(PopulationType) },\n          \n        },\n      }),\n    },\n    */\n    \n    mayo_variant_details: {type: MayoVariantType},\n    gnomad_faf95_popmax: {type: GraphQLFloat},\n    gnomad_faf95_population: { type: GraphQLString },\n    rsid: { type: GraphQLString },\n    clinvarAlleleID: { type: GraphQLString },\n    //denovoHC: { type: GraphQLString },\n    sortedTranscriptConsequences: { type: new GraphQLList(TranscriptConsequenceType) },\n    in_silico_predictors: { type: InSilicoPredictorsType}\n  },\n  isTypeOf: variantData => variantData.gqlType === 'VariantDetails',\n})\n\nexport default VariantDetailsType\n","import {\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\nimport { mergeOverlappingRegions } from '../../utilities/region'\nimport { lookupExonsByGeneId, lookupExonsByTranscriptId } from '../types/exon'\nimport { VariantInterface } from '../types/variant'\nimport { fetchAllSearchResults } from '../../utilities/elasticsearch'\n\n\nexport const ClinvarVariantType = new GraphQLObjectType({\n  name: 'ClinvarVariant',\n  interfaces: [VariantInterface],\n  fields: {\n    // common variant fields\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n    // ClinVar specific fields\n    alleleId: { type: GraphQLInt },\n    clinicalSignificance: { type: GraphQLString },\n    goldStars: { type: GraphQLInt },\n    majorConsequence: { type: GraphQLString },\n  },\n  isTypeOf: variantData => variantData.dataset === 'clinvar',\n})\n\n\nconst rangeQueriesForRegions = (regions, padding = 75) => {\n  const paddedRegions = regions.map(region => ({\n    xstart: region.xstart - padding,\n    xstop: region.xstop + padding,\n  }))\n\n  const queryRegions = mergeOverlappingRegions(\n    paddedRegions.sort((r1, r2) => r1.xstart - r2.xstart)\n  )\n\n  return queryRegions.map(\n    ({ xstart, xstop }) => ({ range: { xpos: { gte: xstart, lte: xstop } } })\n  )\n}\n\n\nexport const fetchClinvarVariantsInGene = async (geneId, ctx) => {\n  const geneExons = await lookupExonsByGeneId(ctx.database.gnomad, geneId)\n  const filteredExons = geneExons.filter(exon => exon.feature_type === 'CDS')\n  const rangeQueries = rangeQueriesForRegions(filteredExons)\n\n  const results = await fetchAllSearchResults(\n    ctx.database.elastic,\n    {\n      index: 'clinvar_grch38',\n      //type: 'variant',\n      body: {\n        query: {\n          bool: {\n            filter: [\n              { term: { gene_ids: geneId } },\n              { bool: { should: rangeQueries } },\n            ],\n          },\n        }\n      },\n      size: 10000,\n      sort: 'xpos:asc',\n      _source: [\n        'allele_id',\n        'alt',\n        'chrom',\n        'clinical_significance',\n        'gene_id_to_consequence_json',\n        'gold_stars',\n        'pos',\n        'ref',\n        'variant_id',\n        'xpos',\n      ],\n    }\n  )\n\n  //console.log(results)\n\n  return results.map((hit) => {\n    const doc = hit._source\n    const majorConsequence = JSON.parse(doc.gene_id_to_consequence_json)[geneId]\n\n    return {\n      // common variant fields\n      alt: doc.alt,\n      chrom: doc.chrom,\n      pos: doc.pos,\n      ref: doc.ref,\n      variantId: doc.variant_id,\n      xpos: doc.xpos,\n      dataset: 'clinvar',\n      // ClinVar specific fields\n      alleleId: doc.allele_id,\n      clinicalSignificance: doc.clinical_significance,\n      goldStars: doc.gold_stars,\n      majorConsequence,\n    }\n  })\n}\n\n\nexport const fetchClinvarVariantsInTranscript = async (transcriptId, ctx) => {\n  const transcriptExons = await lookupExonsByTranscriptId(ctx.database.gnomad, transcriptId)\n  const filteredExons = transcriptExons.filter(exon => exon.feature_type === 'CDS')\n  const rangeQueries = rangeQueriesForRegions(filteredExons)\n\n  const results = await fetchAllSearchResults(\n    ctx.database.elastic,\n    {\n      index: 'clinvar_grch38',\n      type: 'variant',\n      body: {\n        query: {\n          bool: {\n            filter: [\n              { term: { transcript_ids: transcriptId } },\n              { bool: { should: rangeQueries } },\n            ],\n          },\n        }\n      },\n      size: 10000,\n      sort: 'xpos:asc',\n      _source: [\n        'allele_id',\n        'alt',\n        'chrom',\n        'clinical_significance',\n        'gold_stars',\n        'pos',\n        'ref',\n        'transcript_id_to_consequence_json',\n        'variant_id',\n        'xpos',\n      ],\n    }\n  )\n\n  return results.map((hit) => {\n    const doc = hit._source\n    const majorConsequence = JSON.parse(doc.transcript_id_to_consequence_json)[transcriptId]\n\n    return {\n      // common variant fields\n      alt: doc.alt,\n      chrom: doc.chrom,\n      pos: doc.pos,\n      ref: doc.ref,\n      variantId: doc.variant_id,\n      xpos: doc.xpos,\n      dataset: 'clinvar',\n      // ClinVar specific fields\n      alleleId: doc.allele_id,\n      clinicalSignificance: doc.clinical_significance,\n      goldStars: doc.gold_stars,\n      majorConsequence,\n    }\n  })\n}\n","// The cardinality aggregation returns only an approximate count.\n// It is accurate enough for the purposes of determining whether or not to\n// return individual variants for a region.\n// https://www.elastic.co/guide/en/elasticsearch/guide/current/cardinality.html\nconst countVariantsInRegion = async (ctx, { chrom, start, stop }, subset) => {\n  const response = await ctx.database.elastic.search({\n    index: 'pcgc_exomes,spark_genomes',\n    type: 'variant',\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            {\n              range: {\n                pos: {\n                  gte: start,\n                  lte: stop,\n                },\n              },\n            },\n            // FIXME: This should query based on the requested subset's AC\n            // However, there is no non_cancer field for genomes and we need to query\n            // across both indices for the cardinality aggregation to work.\n            // Using this workaround since since this function is used only to get an\n            // approximate count of variants to determine whether or not to show variants\n            // on the region page.\n            // A possible solution is adding a non_cancer field to the genomes index as\n            // an alias to the gnomad field.\n            // https://www.elastic.co/guide/en/elasticsearch/reference/current/alias.html\n            //{ range: { [`gnomad.AC_raw`]: { gt: 0 } } },\n          ],\n        },\n      },\n      aggs: {\n        unique_variants: {\n          cardinality: {\n            field: 'variant_id',\n          },\n        },\n      },\n    },\n    size: 0,\n  })\n\n  return response.aggregations.unique_variants.value\n}\n\nexport default countVariantsInRegion\n","const fetchGnomadConstraintByTranscript = async (ctx, transcriptId) => {\n  const response = await ctx.database.elastic.search({\n    index: 'gnomad_constraint_2_1_1',\n    //type: 'constraint',\n    body: {\n      query: {\n        bool: {\n          filter: {\n            term: { transcript_id: transcriptId },\n          },\n        },\n      },\n    },\n    size: 1,\n  })\n\n  const doc = response.hits.hits[0]\n\n  // eslint-disable-next-line no-underscore-dangle\n  return doc ? doc._source : null\n}\n\nexport default fetchGnomadConstraintByTranscript\n","import { UserVisibleError } from '../errors'\n\nconst fetchGnomadStructuralVariantDetails = async (ctx, variantId) => {\n  const response = await ctx.database.elastic.search({\n    index: 'gnomad_structural_variants',\n    type: 'variant',\n    body: {\n      query: {\n        bool: {\n          filter: {\n            term: { variant_id: variantId },\n          },\n        },\n      },\n    },\n  })\n\n  if (response.hits.hits.length === 0) {\n    throw new UserVisibleError('Variant not found')\n  }\n\n  const variant = response.hits.hits[0]._source // eslint-disable-line no-underscore-dangle\n\n  return {\n    algorithms: variant.algorithms,\n    alts: variant.alts,\n    ac: variant.ac.total,\n    ac_hom: variant.type === 'MCNV' ? null : variant.n_homalt.total,\n    an: variant.an.total,\n    chrom: variant.chrom,\n    consequences: Object.keys(variant.consequences).map(csq => ({\n      consequence: csq,\n      genes: variant.consequences[csq],\n    })),\n    copy_numbers:\n      variant.type === 'MCNV'\n        ? variant.alts.map((alt, i) => ({\n            copy_number: parseInt(alt.slice(4, alt.length - 1), 10),\n            ac: variant.mcnv_ac.total[i],\n          }))\n        : null,\n    cpx_intervals: variant.cpx_intervals,\n    cpx_type: variant.cpx_type,\n    end_chrom: variant.end_chrom,\n    end_pos: variant.end_pos,\n    evidence: variant.evidence,\n    filters: variant.filters,\n    genes: variant.genes || [],\n    length: variant.length,\n    populations: ['afr', 'amr', 'eas', 'eur', 'oth'].map(popId => ({\n      id: popId.toUpperCase(),\n      ac: variant.ac[popId] || 0,\n      an: variant.an[popId] || 0,\n      ac_hom: variant.type === 'MCNV' ? null : variant.n_homalt[popId],\n    })),\n    pos: variant.pos,\n    qual: variant.qual,\n    type: variant.type,\n    variant_id: variant.variant_id,\n  }\n}\n\nexport default fetchGnomadStructuralVariantDetails\n","import { fetchAllSearchResults } from '../../utilities/elasticsearch'\nimport rankedSVGeneConsequences from './rankedSVGeneConsequences'\n\nconst fetchGnomadStructuralVariantsByGene = async (ctx, { gene_name: geneName }) => {\n  const hits = await fetchAllSearchResults(ctx.database.elastic, {\n    index: 'gnomad_structural_variants',\n    type: 'variant',\n    size: 10000,\n    _source: [\n      'ac.total',\n      'af.total',\n      'an.total',\n      'chrom',\n      'consequences',\n      'end_chrom',\n      'end_pos',\n      'filters',\n      'intergenic',\n      'length',\n      'n_homalt.total',\n      'pos',\n      'type',\n      'variant_id',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: {\n            term: { genes: geneName },\n          },\n        },\n      },\n      sort: [{ pos: { order: 'asc' } }],\n    },\n  })\n\n  return hits.map(hit => {\n    const variant = hit._source // eslint-disable-line no-underscore-dangle\n\n    let majorConsequence = rankedSVGeneConsequences.find(\n      csq => variant.consequences[csq] && variant.consequences[csq].includes(geneName)\n    )\n    if (!majorConsequence && variant.intergenic) {\n      majorConsequence = 'intergenic'\n    }\n\n    return {\n      ac: variant.ac.total,\n      ac_hom: variant.type === 'MCNV' ? null : variant.n_homalt.total,\n      an: variant.an.total,\n      af: variant.af.total,\n      chrom: variant.chrom,\n      end_chrom: variant.end_chrom,\n      end_pos: variant.end_pos,\n      consequence: majorConsequence,\n      filters: variant.filters,\n      length: variant.length,\n      pos: variant.pos,\n      type: variant.type,\n      variant_id: variant.variant_id,\n    }\n  })\n}\n\nexport default fetchGnomadStructuralVariantsByGene\n","import { fetchAllSearchResults } from '../../utilities/elasticsearch'\nimport rankedSVGeneConsequences from './rankedSVGeneConsequences'\n\nconst fetchGnomadStructuralVariantsByRegion = async (\n  ctx,\n  { chrom, start, stop, xstart, xstop }\n) => {\n  const hits = await fetchAllSearchResults(ctx.database.elastic, {\n    index: 'gnomad_structural_variants',\n    type: 'variant',\n    size: 10000,\n    _source: [\n      'ac.total',\n      'af.total',\n      'an.total',\n      'chrom',\n      'consequences',\n      'end_chrom',\n      'end_pos',\n      'filters',\n      'intergenic',\n      'length',\n      'n_homalt.total',\n      'pos',\n      'type',\n      'variant_id',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            \n            {\n              range: {\n                xpos: {\n                  lte: xstop,\n                },\n              },\n            },\n            \n            {\n              range: {\n                end_xpos: {\n                  gte: xstart,\n                },\n              },\n            },\n\n            /*\n            {\n              range: {\n                end_xpos: {\n                  gte: xstart,\n                },\n              },\n            },\n          */\n          ],\n        },\n      },\n      sort: [{ pos: { order: 'asc' } }],\n    },\n  })\n\n  console.log(xstart)\n  console.log(xstop)\n  console.log(hits)\n\n  const variants = hits.map(hit => {\n    const variant = hit._source // eslint-disable-line no-underscore-dangle\n\n    //if(variant.pos >= start){\n    //  console.log(variant.pos)\n    //}\n\n    let majorConsequence = rankedSVGeneConsequences.find(csq => variant.consequences[csq])\n    if (!majorConsequence && variant.intergenic) {\n      majorConsequence = 'intergenic'\n    }\n\n    return {\n      ac: variant.ac.total,\n      ac_hom: variant.type === 'MCNV' ? null : variant.n_homalt.total,\n      an: variant.an.total,\n      af: variant.af.total,\n      chrom: variant.chrom,\n      end_chrom: variant.end_chrom,\n      end_pos: variant.end_pos,\n      consequence: majorConsequence,\n      filters: variant.filters,\n      length: variant.length,\n      pos: variant.pos,\n      type: variant.type,\n      variant_id: variant.variant_id,\n    }\n  })\n\n  return variants.filter(variant => {\n    // Only include insertions if the start point falls within the requested region.\n    \n    //return variant.chrom === chrom && variant.pos >= start && variant.pos <= stop\n    return variant.chrom === chrom \n\n\n    /*\n    if (variant.type === 'INS') {\n      return variant.chrom === chrom && variant.pos >= start && variant.pos <= stop\n    }\n\n    \n    // Only include interchromosomal variants (CTX, BNDs, a few INS and CPX) if one of the endpoints\n    // falls within the requested region.\n    if (variant.type === 'BND' || variant.type === 'CTX' || variant.chrom !== variant.end_chrom) {\n      return (\n        (variant.chrom === chrom && variant.pos >= start && variant.pos <= stop) ||\n        (variant.end_chrom === chrom && variant.end_pos >= start && variant.end_pos <= stop)\n      )\n    }*/\n    \n\n    return true\n  })\n}\n\nexport default fetchGnomadStructuralVariantsByRegion\n","//import { UserVisibleError } from '../../errors'\n//import { fetchGnomadMNVSummariesByVariantId } from './gnomadMultiNucleotideVariants'\n//import { request } from \"graphql-request\"\nimport 'whatwg-fetch'\n\n//import fetch from 'node-fetch'\n\n\n/*\nconst formatHistogram = histogramData => ({\n  bin_edges: histogramData.bin_edges.split('|').map(s => Number(s)),\n  bin_freq: histogramData.bin_freq.split('|').map(s => Number(s)),\n  n_larger: histogramData.n_larger,\n  n_smaller: histogramData.n_smaller,\n})\n\n*/\n\n//const POPULATIONS = ['afr', 'amr', 'asj', 'eas', 'fin', 'nfe', 'oth', 'sas']\nconst POPULATIONS = ['afr', 'amr', 'eas', 'eur', 'oth', 'sas']\n\n/*\nconst SUBPOPULATIONS = {\n  afr: ['female', 'male'],\n  amr: ['female', 'male'],\n  asj: ['female', 'male'],\n  eas: ['female', 'male', 'jpn', 'kor', 'oea'],\n  fin: ['female', 'male'],\n  nfe: ['female', 'male', 'bgr', 'est', 'nwe', 'onf', 'seu', 'swe'],\n  oth: ['female', 'male'],\n  sas: ['female', 'male'],\n}\n*/\n\nconst formatPopulations = variantData =>\n  POPULATIONS.map(popId => ({\n    id: popId.toUpperCase(),\n    ac: variantData.AC_adj[popId] || 0,\n    an: variantData.AN_adj[popId] || 0,\n    ac_hom: variantData.nhomalt_adj[popId] || 0,\n\n    //ac: (variantData.AC_adj[popId] || {}).total || 0,\n    //an: (variantData.AN_adj[popId] || {}).total || 0,\n    //ac_hemi: variantData.nonpar ? (variantData.AC_adj[popId] || {}).male || 0 : 0,\n    //ac_hom: (variantData.nhomalt_adj[popId] || {}).total || 0,\n\n    /*\n    subpopulations: SUBPOPULATIONS[popId].map(subPopId => ({\n      id: subPopId.toUpperCase(),\n      ac: (variantData.AC_adj[popId] || {})[subPopId] || 0,\n      an: (variantData.AN_adj[popId] || {})[subPopId] || 0,\n      ac_hom: (variantData.nhomalt_adj[popId] || {})[subPopId] || 0,\n    })),*/\n\n  }))\n\n/*\nconst formatFilteringAlleleFrequency = (variantData, fafField) => {\n  const fafData = variantData[fafField]\n  const { total, ...populationFAFs } = variantData[fafField]\n\n  let popmaxFAF = -Infinity\n  let popmaxPopulation = null\n\n  Object.keys(populationFAFs)\n    // gnomAD 2.1.0 calculated FAF for singleton variants.\n    // This filters out those invalid FAFs.\n    .filter(popId => variantData.AC_adj[popId].total > 1)\n    .forEach(popId => {\n      if (populationFAFs[popId] > popmaxFAF) {\n        popmaxFAF = fafData[popId]\n        popmaxPopulation = popId.toUpperCase()\n      }\n    })\n\n  if (popmaxFAF === -Infinity) {\n    popmaxFAF = null\n  }\n\n  return {\n    popmax: popmaxFAF,\n    popmax_population: popmaxPopulation,\n  }\n}\n*/\n\nconst fetchVariantData = async (ctx, variantId) => {\n\n \n\n   const genomeData = await ctx.database.elastic.search({\n    index: 'spark_mito',\n    //type: 'variant',\n    _source: [\n      'alt',\n      'chrom',\n      'filters',\n      'pos',\n      'ref',\n      'sortedTranscriptConsequences',\n      'haplogroups',\n      'populations',\n      'variant_id',\n      'xpos',\n      'ac',\n      'af',\n      'an',\n      'ac_het',\n      'ac_hom',\n      'max_heteroplasmy'\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n            //{ range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n          ],\n        },\n      },\n    },\n    size: 1,\n  })\n\n   /*\n  return { exomeData: exomeData.hits.hits[0] ? exomeData.hits.hits[0]._source : undefined , \n           genomeData: genomeData.hits.hits[0] ? genomeData.hits.hits[0]._source : undefined,\n           sscGenomeData: sscGenomeData.hits.hits[0] ? sscGenomeData.hits.hits[0]._source : undefined }\n  */\n\n  return { genomeData: genomeData.hits.hits[0] ? genomeData.hits.hits[0]._source : undefined }\n\n\n}\n\n\nconst fetchColocatedVariants = async (ctx, variantId) => {\n  const parts = variantId.split('-')\n  const chrom = parts[0]\n  const pos = Number(parts[1])\n\n  /*\n  const requests = [\n    { index: 'gnomad_exomes_2_1_1', subset },\n    // All genome samples are non_cancer, so separate non-cancer numbers are not stored\n    { index: 'gnomad_genomes_2_1_1', subset: subset === 'non_cancer' ? 'gnomad' : subset },\n  ]\n\n  const [exomeResponse, genomeResponse] = await Promise.all(\n    requests.map(({ index, subset: requestSubset }) =>\n      ctx.database.elastic.search({\n        index,\n        type: 'variant',\n        _source: ['variant_id'],\n        body: {\n          query: {\n            bool: {\n              filter: [\n                { term: { chrom } },\n                { term: { pos } },\n                { range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n              ],\n            },\n          },\n        },\n      })\n    )\n  )\n  */\n\n  const exomeResponse = await ctx.database.elastic.search({\n  //await ctx.database.elastic.search({\n    index: 'pcgc_exomes',\n    type: 'variant',\n    _source: ['variant_id'],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            { term: { pos } },\n            { range: { ['AC_raw']: { gt: 0 } } },\n          ],\n        },\n      },\n    },\n  })\n\n  const genomeResponse = await ctx.database.elastic.search({\n  //await ctx.database.elastic.search({\n    index: 'spark_genomes',\n    type: 'variant',\n    _source: ['variant_id'],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            { term: { pos } },\n          ],\n        },\n      },\n    },\n  })\n\n\n  //console.log(exomeResponse)\n  //console.log(genomeResponse)\n\n\n\n  \n\n  // eslint-disable no-underscore-dangle\n  const exomeVariants = exomeResponse.hits.hits.map(doc => doc._source.variant_id)\n  const genomeVariants = genomeResponse.hits.hits.map(doc => doc._source.variant_id)\n  // eslint-enable no-underscore-dangle \n\n  //console.log(exomeVariants)\n  //console.log(genomeVariants)\n\n  const combinedVariants = exomeVariants.concat(genomeVariants)\n\n  //return combinedVariants\n\n  \n  return combinedVariants\n    .filter(otherVariantId => otherVariantId !== variantId)\n    .sort()\n    .filter(\n      (otherVariantId, index, allOtherVariantIds) =>\n        otherVariantId !== allOtherVariantIds[index + 1]\n    )\n\n  \n\n\n}\n\n\n\nconst fetchRSID = async (ctx, variantId) => {\n\n  const query = `{\n    variant(variantId: \"${variantId}\", dataset: gnomad_r3){\n      rsid\n      variantId    \n    }\n  }\n  ` \n\n  try{\n    //const gnomad_data = await request(\"https://gnomad.broadinstitute.org/api\", query)\n\n    const gnomad_data = await fetch(\"https://gnomad.broadinstitute.org/api\", {\n      body: JSON.stringify({\n        query\n      }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      }}).then(response => response.json())\n\n    return gnomad_data.json()\n  }catch(error){\n    return undefined\n  }\n\n}\n\nconst fetchGnomadPopFreq = async (ctx, variantId) => {\n\n  const query = `{\n    variant(variantId: \"${variantId}\", dataset: gnomad_r3){\n      ... on VariantDetails{\n        genome{\n          ac\n          an\n          faf95 {\n            popmax\n            popmax_population\n          }\n\n          populations{\n            id\n            ac\n            an\n            ac_hemi\n            ac_hom\n          }\n        }\n      }\n    }\n  }\n  ` \n\n  try{\n    //const gnomad_data = await request(\"https://gnomad.broadinstitute.org/api\", query)    \n    const gnomad_data = await fetch(\"https://gnomad.broadinstitute.org/api\", {\n      body: JSON.stringify({\n        query\n      }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      }}).then(response => response.json())\n\n    //console.log(gnomad_data.variant.genome.populations)\n\n    return gnomad_data.variant.genome\n    //return gnomad_data\n  }catch(error){\n    return undefined\n  }\n\n}\n\n\n\n\nconst fetchMitoVariantDetails = async (ctx, variantId) => {\n\n\n  const { genomeData } = await fetchVariantData(ctx, variantId)\n\n\n  const sharedData = genomeData \n\n  const sharedVariantFields = {\n    alt: sharedData.alt,\n    chrom: sharedData.chrom,\n    pos: sharedData.pos,\n    ref: sharedData.ref,\n    variantId: sharedData.variant_id,\n    xpos: sharedData.xpos,\n  }\n\n  /*\n  const [colocatedVariants, multiNucleotideVariants] = await Promise.all([\n    fetchColocatedVariants(ctx, variantId, subset),\n    fetchGnomadMNVSummariesByVariantId(ctx, variantId),\n  ])\n  */\n\n  //const colocatedVariants = await fetchColocatedVariants(ctx, variantId)\n  // console.log(colocatedVariants)\n  console.log(sharedData)\n  return {\n    gqlType: 'MitoVariantDetails',\n    // variant interface fields\n    ...sharedVariantFields,\n\n    //colocatedVariants,\n    \n    //flags: ['lcr', 'segdup', 'lc_lof', 'lof_flag'].filter(flag => sharedData.flags[flag]),\n    spark_genome: genomeData\n      ? {\n          ...sharedVariantFields,\n          \n          ac: genomeData.ac,\n          an: genomeData.an,\n          ac_hom: genomeData.ac_hom,\n          ac_het: genomeData.ac_het,\n          max_heteroplasmy: genomeData.max_heteroplasmy          \n        }\n      : null,\n\n    sortedTranscriptConsequences: sharedData.sortedTranscriptConsequences || [],\n    haplogroups: sharedData.haplogroups || [],\n    populations: sharedData.populations || [],    \n  }\n}\n\nexport default fetchMitoVariantDetails\n","import { fetchAllSearchResults } from '../../utilities/elasticsearch'\nimport { mergeOverlappingRegions } from '../../utilities/region'\nimport { lookupExonsByGeneId } from '../types/exon'\n\n//import { request } from \"graphql-request\"\n//import fetch from 'node-fetch'\n\n/*\nimport {\n  annotateVariantsWithMNVFlag,\n  fetchGnomadMNVsByIntervals,\n} from './gnomadMultiNucleotideVariants'\n*/\n\n//import mergePcgcAndGnomadVariantSummaries from './mergePcgcAndGnomadVariants'\n//import mergeExomeAndGenomeVariantSummaries from './mergeExomeAndGenomeVariants'\n//import mergeSSCVariants from './mergeSSCVariants'\n\nimport shapeMitoVariantSummary from './shapeMitoVariantSummary'\nimport mergeMitoVariants from './mergeMitoVariants'\n\n\n/*\nconst annotateVariantsWithDenovoFlag = (variants, dnms) => {\n  const dnmsVariantIds = new Set(dnms.reduce((acc, dnms) => acc.concat(dnms.variant_id), []))\n\n  variants.forEach(variant => {\n    if (dnmsVariantIds.has(variant.variantId)) {\n      variant.flags.push('denovo')\n    }\n  })\n\n  return variants\n}\n\n\nconst fetchDenovos = async (ctx, geneId) => {\n\n  const hits = await fetchAllSearchResults(ctx.database.elastic, {\n\n    index: 'autism_dnms',\n    type: 'variant',\n    size: 10000,\n    _source: [\n      'variant_id',\n      'high_confidence_dnm',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { ANN_GENEID: geneId } },\n          ],\n        },\n      },\n      sort: [{ POS: { order: 'asc' } }],\n    },\n  })\n\n  return hits.map(hit => hit._source) // eslint-disable-line no-underscore-dangle\n}\n*/\nconst fetchMitoVariantsByGene = async (ctx, geneId, canonicalTranscriptId, subset) => {\n  const geneExons = await lookupExonsByGeneId(ctx.database.gnomad, geneId)\n  const filteredRegions = geneExons.filter(exon => exon.feature_type === 'CDS')\n  const sortedRegions = filteredRegions.sort((r1, r2) => r1.xstart - r2.xstart)\n  const padding = 75\n  const paddedRegions = sortedRegions.map(r => ({\n    ...r,\n    start: r.start - padding,\n    stop: r.stop + padding,\n    xstart: r.xstart - padding,\n    xstop: r.xstop + padding,\n  }))\n\n  const mergedRegions = mergeOverlappingRegions(paddedRegions)\n\n  const rangeQueries = mergedRegions.map(region => ({\n    range: {\n      pos: {\n        gte: region.start,\n        lte: region.stop,\n      },\n    },\n  }))\n\n\n  const hits = await fetchAllSearchResults(ctx.database.elastic, { \n//      index: 'pcgc_chr20_test',\n      index: 'mito_test4',\n      //type: 'variant',\n      size: 10000,\n      _source: [\n        'alt',\n        'chrom',\n        'pos',\n        'ref',\n        'sortedTranscriptConsequences',\n        'variant_id',\n        'xpos',\n        'ac',\n        'ac_het',\n        'ac_hom',\n        'an',\n        'af',\n        'max_heteroplasmy',\n        'filters',\n        /*\n        'AC_adj',\n        'AN_adj',\n        'nhomalt_adj',\n        'alt',\n        'chrom',\n        'filters',\n        'flags',\n        //'nonpar',\n        'pos',\n        'ref',\n        'rsid',\n        'sortedTranscriptConsequences',\n        'variant_id',\n        'xpos',\n        'AC',\n        'AN',\n        'AF',\n        'nhomalt',\n        'AC_raw',\n        'AN_raw',\n        'AF_raw',\n        'nhomalt_raw',\n        'AC_proband',\n        'AN_proband',\n        'AF_proband'*/\n\n      ],\n      /*\n      body: {\n        query : {\n          nested: {\n            path: 'sortedTranscriptConsequences',\n            query:{\n              match: {\n                'sortedTranscriptConsequences.gene_id': geneId\n              }\n            }\n          }\n        },*/\n        \n      body: {\n        query: {\n          bool: {\n            filter: [\n              {\n                nested: {\n                  path: 'sortedTranscriptConsequences',\n                  query: {\n                    term: { 'sortedTranscriptConsequences.gene_id': geneId },\n                  },\n                },\n              },\n              { bool: { should: rangeQueries } },\n              { range: { ['ac']: { gt: 0 } } },\n            ],\n          },\n        },\n        sort: [{ pos: { order: 'asc' } }],\n      },\n    })\n\n  //console.log(hits)\n  \n\n\n  const sparkVariants = hits.map(shapeMitoVariantSummary({ type: 'gene', geneId }))\n\n  const ssc_hits = await fetchAllSearchResults(ctx.database.elastic, { \n//      index: 'pcgc_chr20_test',\n      index: 'ssc_mito',\n      //type: 'variant',\n      size: 10000,\n      _source: [\n        'alt',\n        'chrom',\n        'pos',\n        'ref',\n        'sortedTranscriptConsequences',\n        'variant_id',\n        'xpos',\n        'ac',\n        'ac_het',\n        'ac_hom',\n        'an',\n        'af',\n        'max_heteroplasmy',\n        'filters',\n      ],\n      body: {\n        query: {\n          bool: {\n            filter: [\n              {\n                nested: {\n                  path: 'sortedTranscriptConsequences',\n                  query: {\n                    term: { 'sortedTranscriptConsequences.gene_id': geneId },\n                  },\n                },\n              },\n              { bool: { should: rangeQueries } },\n              { range: { ['ac']: { gt: 0 } } },\n            ],\n          },\n        },\n        sort: [{ pos: { order: 'asc' } }],\n      },\n    })\n\n\n\n  const sscVariants = ssc_hits.map(shapeMitoVariantSummary({ type: 'gene', geneId }))\n\n  const allVariants = mergeMitoVariants(sparkVariants, sscVariants)\n\n  //return sparkVariants\n  return allVariants\n  //return sscVariants\n\n}\n\nexport default fetchMitoVariantsByGene\n","//import { UserVisibleError } from '../../errors'\n//import { fetchGnomadMNVSummariesByVariantId } from './gnomadMultiNucleotideVariants'\n//import { request } from \"graphql-request\"\n//import fetch from 'node-fetch'\nimport 'whatwg-fetch'\n\nconst formatHistogram = histogramData => ({\n  bin_edges: histogramData.bin_edges.split('|').map(s => Number(s)),\n  bin_freq: histogramData.bin_freq.split('|').map(s => Number(s)),\n  n_larger: histogramData.n_larger,\n  n_smaller: histogramData.n_smaller,\n})\n\n\n\n//const POPULATIONS = ['afr', 'amr', 'asj', 'eas', 'fin', 'nfe', 'oth', 'sas']\nconst POPULATIONS = ['afr', 'amr', 'eas', 'eur', 'oth', 'sas']\n\n/*\nconst SUBPOPULATIONS = {\n  afr: ['female', 'male'],\n  amr: ['female', 'male'],\n  asj: ['female', 'male'],\n  eas: ['female', 'male', 'jpn', 'kor', 'oea'],\n  fin: ['female', 'male'],\n  nfe: ['female', 'male', 'bgr', 'est', 'nwe', 'onf', 'seu', 'swe'],\n  oth: ['female', 'male'],\n  sas: ['female', 'male'],\n}\n*/\n\nconst formatPopulations = variantData =>\n  POPULATIONS.map(popId => ({\n    id: popId.toUpperCase(),\n    ac: variantData.AC_adj[popId] || 0,\n    an: variantData.AN_adj[popId] || 0,\n    ac_hom: variantData.nhomalt_adj[popId] || 0,\n\n    //ac: (variantData.AC_adj[popId] || {}).total || 0,\n    //an: (variantData.AN_adj[popId] || {}).total || 0,\n    //ac_hemi: variantData.nonpar ? (variantData.AC_adj[popId] || {}).male || 0 : 0,\n    //ac_hom: (variantData.nhomalt_adj[popId] || {}).total || 0,\n\n    /*\n    subpopulations: SUBPOPULATIONS[popId].map(subPopId => ({\n      id: subPopId.toUpperCase(),\n      ac: (variantData.AC_adj[popId] || {})[subPopId] || 0,\n      an: (variantData.AN_adj[popId] || {})[subPopId] || 0,\n      ac_hom: (variantData.nhomalt_adj[popId] || {})[subPopId] || 0,\n    })),*/\n\n  }))\n\n/*\nconst formatFilteringAlleleFrequency = (variantData, fafField) => {\n  const fafData = variantData[fafField]\n  const { total, ...populationFAFs } = variantData[fafField]\n\n  let popmaxFAF = -Infinity\n  let popmaxPopulation = null\n\n  Object.keys(populationFAFs)\n    // gnomAD 2.1.0 calculated FAF for singleton variants.\n    // This filters out those invalid FAFs.\n    .filter(popId => variantData.AC_adj[popId].total > 1)\n    .forEach(popId => {\n      if (populationFAFs[popId] > popmaxFAF) {\n        popmaxFAF = fafData[popId]\n        popmaxPopulation = popId.toUpperCase()\n      }\n    })\n\n  if (popmaxFAF === -Infinity) {\n    popmaxFAF = null\n  }\n\n  return {\n    popmax: popmaxFAF,\n    popmax_population: popmaxPopulation,\n  }\n}\n*/\n\nconst fetchVariantData = async (ctx, variantId) => {\n\n/*\n  const requests = [\n    { index: 'gnomad_exomes_2_1_1', subset },\n    // All genome samples are non_cancer, so separate non-cancer numbers are not stored\n    { index: 'gnomad_genomes_2_1_1', subset: subset === 'non_cancer' ? 'gnomad' : subset },\n  ]\n*/\n\n/*\n  const [exomeData, genomeData] = await Promise.all(\n    requests.map(({ index, subset: requestSubset }) =>\n      ctx.database.elastic\n        .search({\n          index,\n          type: 'variant',\n          _source: [\n            requestSubset,\n            'ab_hist_alt',\n            'allele_info',\n            'alt',\n            'chrom',\n            'dp_hist_all',\n            'dp_hist_alt',\n            'filters',\n            'flags',\n            'gnomad_age_hist_het',\n            'gnomad_age_hist_hom',\n            'gq_hist_all',\n            'gq_hist_alt',\n            'nonpar',\n            'pab_max',\n            'pos',\n            'qual',\n            'ref',\n            'rf_tp_probability',\n            'rsid',\n            'sortedTranscriptConsequences',\n            'variant_id',\n            'xpos',\n          ],\n          body: {\n            query: {\n              bool: {\n                filter: [\n                  { term: { variant_id: variantId } },\n                  { range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n                ],\n              },\n            },\n          },\n          size: 1,\n        })\n        .then(response => response.hits.hits[0])\n        // eslint-disable-next-line no-underscore-dangle\n        .then(doc => (doc ? { ...doc._source, ...doc._source[requestSubset] } : undefined))\n    )\n  )\n  */\n\n\n  /*\n  return {\n    exomeData,\n    genomeData,\n  }\n  */\n\n  //console.log(\"In here 2\")\n\n  const exomeData = await ctx.database.elastic.search({\n  //await ctx.database.elastic.search({\n    //index: 'bpkd_exomes',\n    index: 'pkd_exomes',\n    _source: [\n//      requestSubset,\n//      'ab_hist_alt',\n//      'allele_info',\n      'alt',\n      'chrom',\n//      'dp_hist_all',\n//      'dp_hist_alt',\n      'filters',\n//      'flags',\n//      'gnomad_age_hist_het',\n//      'gnomad_age_hist_hom',\n//      'gq_hist_all',\n//      'gq_hist_alt',\n//      'nonpar',\n//      'pab_max',\n      'pos',\n//      'qual',\n      'ref',\n//      'rf_tp_probability',\n//      'rsid',\n      'sortedTranscriptConsequences',\n      'variant_id',\n      'xpos',\n      'AC_adj',\n      'AN_adj',\n      'AF_adj',\n      'nhomalt_adj',\n      'AC',\n      'AF',\n      'AN',\n      'nhomalt',\n      'AC_raw',\n      'AN_raw',\n      'AF_raw',\n      'AC_male',\n      'AN_male',\n      'nhomalt_male',\n      'AC_female',\n      'AN_female',\n      'nhomalt_female',\n      'genotype_quality',\n      'genotype_depth',\n      'allele_balance',\n      'in_silico_predictors'\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n            //{ range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n          ],\n        },\n      },\n    },\n    size: 1,\n  })\n  //.then(function (response){\n    //console.log(\"In here 3\") \n    //console.log(response.hits.hits[0]._source)\n    //return response.hits.hits[0]._source\n\n  //})\n  //.then(response => console.log(response.hits.hits[0]))\n  //.then(response => return response.hits.hits[0])\n  //.then(doc => (doc ? { ...doc._source } : undefined))\n  //.then(response => response.hits.hits[0])\n  console.log(\"Showing exome data\")\n  //console.log(exomeData.hits.hits[0]._source)\n\n  //return esHit => {\n  //  return esHit.hits.hits[0]\n  //}\n  //console.log(\"In here 3.1\") \n  /*\n  const genomeData = await ctx.database.elastic.search({\n    index: 'spark_genomes',\n    type: 'variant',\n    _source: [\n      'alt',\n      'chrom',\n      'filters',\n      'pos',\n      'ref',\n      'sortedTranscriptConsequences',\n      'variant_id',\n      'xpos',\n      'AC_adj',\n      'AN_adj',\n      'AF_adj',\n      'nhomalt_adj',\n      'AC',\n      'AF',\n      'AN',\n      'nhomalt',\n      'AC_raw',\n      'AN_raw',\n      'AF_raw',\n      'AC_male',\n      'AN_male',\n      'nhomalt_male',\n      'AC_female',\n      'AN_female',\n      'nhomalt_female',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n            //{ range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n          ],\n        },\n      },\n    },\n    size: 1,\n  })\n\n const sscGenomeData = await ctx.database.elastic.search({\n    index: 'ssc_genomes',\n    type: 'variant',\n    _source: [\n      'alt',\n      'chrom',\n      'filters',\n      'pos',\n      'ref',\n      'sortedTranscriptConsequences',\n      'variant_id',\n      'xpos',\n      'AC_adj',\n      'AN_adj',\n      'AF_adj',\n      'nhomalt_adj',\n      'AC',\n      'AF',\n      'AN',\n      'nhomalt',\n      'AC_raw',\n      'AN_raw',\n      'AF_raw',\n      'AC_male',\n      'AN_male',\n      'nhomalt_male',\n      'AC_female',\n      'AN_female',\n      'nhomalt_female',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n            //{ range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n          ],\n        },\n      },\n    },\n    size: 1,\n  })\n  */\n  //console.log(exomeData.hits.hits[0]._source) \n\n  //console.log(\"In here 3\") \n  //console.log(genomeData.hits.hits[0]) \n\n  //console.log(\"In here 4\") \n  console.log(exomeData)\n\n  return exomeData.hits.hits[0]._source\n\n  /*\n  return { exomeData: exomeData.hits.hits[0] ? exomeData.hits.hits[0]._source : undefined , \n           genomeData: genomeData.hits.hits[0] ? genomeData.hits.hits[0]._source : undefined,\n           sscGenomeData: sscGenomeData.hits.hits[0] ? sscGenomeData.hits.hits[0]._source : undefined }\n  */\n\n}\n\n\nconst fetchColocatedVariants = async (ctx, variantId) => {\n  const parts = variantId.split('-')\n  const chrom = parts[0]\n  const pos = Number(parts[1])\n\n  /*\n  const requests = [\n    { index: 'gnomad_exomes_2_1_1', subset },\n    // All genome samples are non_cancer, so separate non-cancer numbers are not stored\n    { index: 'gnomad_genomes_2_1_1', subset: subset === 'non_cancer' ? 'gnomad' : subset },\n  ]\n\n  const [exomeResponse, genomeResponse] = await Promise.all(\n    requests.map(({ index, subset: requestSubset }) =>\n      ctx.database.elastic.search({\n        index,\n        type: 'variant',\n        _source: ['variant_id'],\n        body: {\n          query: {\n            bool: {\n              filter: [\n                { term: { chrom } },\n                { term: { pos } },\n                { range: { [`${requestSubset}.AC_raw`]: { gt: 0 } } },\n              ],\n            },\n          },\n        },\n      })\n    )\n  )\n  */\n\n  const exomeResponse = await ctx.database.elastic.search({\n  //await ctx.database.elastic.search({\n    //index: 'bpkd_exomes',\n    index: 'pkd_exomes',\n    //type: 'variant',\n    _source: ['variant_id'],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            { term: { pos } },\n            { range: { ['AC_raw']: { gt: 0 } } },\n          ],\n        },\n      },\n    },\n  })\n\n  /*\n  const genomeResponse = await ctx.database.elastic.search({\n  //await ctx.database.elastic.search({\n    index: 'spark_genomes',\n    type: 'variant',\n    _source: ['variant_id'],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            { term: { pos } },\n          ],\n        },\n      },\n    },\n  })\n  */\n\n  //console.log(exomeResponse)\n  //console.log(genomeResponse)\n\n\n\n  \n\n  // eslint-disable no-underscore-dangle\n  const exomeVariants = exomeResponse.hits.hits.map(doc => doc._source.variant_id)\n  //const genomeVariants = genomeResponse.hits.hits.map(doc => doc._source.variant_id)\n  // eslint-enable no-underscore-dangle \n\n  //console.log(exomeVariants)\n  //console.log(genomeVariants)\n\n  //const combinedVariants = exomeVariants.concat(genomeVariants)\n  const combinedVariants = exomeVariants\n\n  //return combinedVariants\n\n  \n  return combinedVariants\n    .filter(otherVariantId => otherVariantId !== variantId)\n    .sort()\n    .filter(\n      (otherVariantId, index, allOtherVariantIds) =>\n        otherVariantId !== allOtherVariantIds[index + 1]\n    )\n\n  \n\n\n}\n\n\n\nconst fetchRSID = async (ctx, variantId) => {\n\n  const query = `{\n    variant(variantId: \"${variantId}\", dataset: gnomad_r3){\n      rsid\n      variantId    \n    }\n  }\n  ` \n\n  try{\n    //const gnomad_data = await request(\"https://gnomad.broadinstitute.org/api\", query)\n\n    const gnomad_data = await fetch(\"https://gnomad.broadinstitute.org/api\", {\n      body: JSON.stringify({\n        query\n      }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      }}).then(response => response.json())\n\n\n    return gnomad_data\n  }catch(error){\n    return undefined\n  }\n\n}\n\nconst fetchGnomadPopFreq = async (ctx, variantId) => {\n\n  const query = `{\n    variant(variantId: \"${variantId}\", dataset: gnomad_r3){\n      ... on VariantDetails{\n        genome{\n          ac\n          an\n          faf95 {\n            popmax\n            popmax_population\n          }\n\n          populations{\n            id\n            ac\n            an\n            ac_hemi\n            ac_hom\n          }\n        }\n      }\n    }\n  }\n  ` \n\n  try{\n    //const gnomad_data = await request(\"https://gnomad.broadinstitute.org/api\", query)    \n\n    const gnomad_data = await fetch(\"https://gnomad.broadinstitute.org/api\", {\n      body: JSON.stringify({\n        query\n      }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      }}).then(response => response.json())\n\n    //console.log(gnomad_data.variant.genome.populations)\n\n    return gnomad_data.variant.genome\n    //return gnomad_data\n  }catch(error){\n    return undefined\n  }\n\n}\n\n\n\n\nconst fetchVariantDetails = async (ctx, variantId) => {\n  //const { exomeData, genomeData } = await fetchGnomadVariantData(ctx, variantId, subset)\n\n\n  //if (!exomeData && !genomeData) {\n  //  throw new UserVisibleError('Variant not found')\n  //}\n\n  //const sharedData = exomeData || genomeData\n\n  //console.log(\"In here 1\")\n  //const exomeData = await fetchVariantData(ctx, variantId)\n  //console.log(\"In here 4\")\n  //console.log(exomeData)\n\n\n  //const { exomeData, genomeData, sscGenomeData } = await fetchVariantData(ctx, variantId)\n  const exomeData  = await fetchVariantData(ctx, variantId)\n\n\n  //console.log(sscGenomeData) \n\n  // const sharedData = exomeData\n\n\n  const clinVarES = await ctx.database.elastic.search({\n    index: 'clinvar_grch38',\n    //type: 'variant',\n    _source: [\n      'allele_id',\n      'alt',\n      'chrom',\n      'clinical_significance',\n      'gene_id_to_consequence_json',\n      'gold_stars',\n      'pos',\n      'ref',\n      'variant_id',\n      'xpos',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n          ],\n        },\n      }\n    },\n    size: 1,\n  })\n\n  \n  const clinVarData = clinVarES.hits.hits[0] ? clinVarES.hits.hits[0]._source : undefined\n  //console.log(clinVarData)\n\n\n  const mayoDB = await ctx.database.elastic.search({\n    index: 'mayo_database',\n    _source: [\n      'variant_id',\n      'MayoVariantID',\n      'VariantTypeName',\n      'ClinicalSignificanceShortName'\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n          ],\n        },\n      }\n    },\n    size: 1,\n  })\n\n  \n  const mayoData = mayoDB.hits.hits[0] ? mayoDB.hits.hits[0]._source : undefined\n  //console.log(mayoData)\n  \n  /*\n  const denovoES = await ctx.database.elastic.search({\n    index: 'autism_dnms',\n    type: 'variant',\n    _source: [\n      'variant_id',\n      'high_confidence_dnm',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { variant_id: variantId } },\n          ],\n        },\n      }\n    },\n    size: 1,\n  })\n\n  \n  const denovoData = denovoES.hits.hits[0] ? denovoES.hits.hits[0]._source : undefined\n  */\n  //console.log(\"In here\")\n  //console.log(denovoData)\n\n  \n\n\n  /*\n  const query = `{\n    variant(variantId: \"${variantId}\", dataset: gnomad_r3){\n      rsid\n      variantId    \n    }\n  }\n  `\n  const gnomad_data = undefined\n    \n\n\n  try{\n    console.log(\"In here1\")\n    gnomad_data = await request(\"https://gnomad.broadinstitute.org/api\", query)\n  //console.log(gnomad_data.data)\n\n  }catch(error){\n  }\n  */\n\n  const gnomad_data = await fetchRSID(ctx, variantId)\n  //console.log(\"Showing gnomod rsID data\")\n  //console.log(gnomad_data)  \n\n  const gnomad_pop_data = await fetchGnomadPopFreq(ctx, variantId)\n\n  //console.log(\"Showing gnomod population data\")\n  //console.log(gnomad_pop_data)\n\n  //const sharedData = exomeData || genomeData || sscGenomeData\n  const sharedData = exomeData\n  //console.log(sharedData)\n\n  const sharedVariantFields = {\n    alt: sharedData.alt,\n    chrom: sharedData.chrom,\n    pos: sharedData.pos,\n    ref: sharedData.ref,\n    variantId: sharedData.variant_id,\n    xpos: sharedData.xpos,\n  }\n\n  /*\n  const [colocatedVariants, multiNucleotideVariants] = await Promise.all([\n    fetchColocatedVariants(ctx, variantId, subset),\n    fetchGnomadMNVSummariesByVariantId(ctx, variantId),\n  ])\n  */\n\n  const colocatedVariants = await fetchColocatedVariants(ctx, variantId)\n  // console.log(colocatedVariants)\n  //console.log(exomeData.genotype_depth.all_raw)\n\n  return {\n    gqlType: 'VariantDetails',\n    // variant interface fields\n    ...sharedVariantFields,\n    // gnomAD specific fields\n\n    /*\n    age_distribution: {\n      het: formatHistogram(sharedData.gnomad_age_hist_het),\n      hom: formatHistogram(sharedData.gnomad_age_hist_hom),\n    },\n    colocatedVariants,\n    multiNucleotideVariants,\n    */\n\n    colocatedVariants,\n    gnomadPopFreq: gnomad_pop_data ? gnomad_pop_data.populations : null,\n    gnomadAF: gnomad_pop_data ? gnomad_pop_data.ac/gnomad_pop_data.an : null,\n    \n\n    bpkd_exome: exomeData\n      ? {\n          // Include variant fields so that the reads data resolver can access them.\n          ...sharedVariantFields,\n          //ac: exomeData.AC_adj.total,\n          //an: exomeData.AN_adj.total,\n          //ac_hemi: exomeData.nonpar ? exomeData.AC_adj.male : 0,\n          //ac_hom: exomeData.nhomalt_adj.total,\n\n          ac: exomeData.AC,\n          an: exomeData.AN,\n          //ac_hemi: exomeData.nonpar ? exomeData.AC_adj.male : 0,\n          ac_hom: exomeData.nhomalt,\n\n          ac_male: exomeData.AC_male,\n          an_male: exomeData.AN_male,\n          ac_male_hom: exomeData.nhomalt_male,\n\n\n          ac_female: exomeData.AC_female,\n          an_female: exomeData.AN_female,\n          ac_female_hom: exomeData.nhomalt_female,\n          \n          //faf95: formatFilteringAlleleFrequency(exomeData, 'faf95_adj'),\n          //faf99: formatFilteringAlleleFrequency(exomeData, 'faf99_adj'),\n          //filters: exomeData.filters,\n          populations: formatPopulations(exomeData),\n                    \n          qualityMetrics: {\n            \n            alleleBalance: {\n              //alt: formatHistogram(exomeData.ab_hist_alt),\n              alt: exomeData.allele_balance.alt_adj,\n            },\n            \n            genotypeDepth: {\n              //all: formatHistogram(exomeData.genotype_depth.all_raw),\n              //alt: formatHistogram(exomeData.genotype_depth.alt_raw),\n              all: exomeData.genotype_depth.all_adj,\n              alt: exomeData.genotype_depth.alt_adj,\n\n            },            \n            genotypeQuality: {\n              //all: formatHistogram(exomeData.gq_hist_all),\n              //alt: formatHistogram(exomeData.gq_hist_alt),\n\n              all: exomeData.genotype_quality.all_adj,\n              alt: exomeData.genotype_quality.alt_adj,\n\n            },\n\n            /*\n            siteQualityMetrics: {\n              ...exomeData.allele_info,\n              pab_max: exomeData.pab_max,\n              RF: exomeData.rf_tp_probability,\n              SiteQuality: exomeData.qual,\n            },*/\n          },\n\n        }\n      : null,\n\n\n    /*\n    spark_exome: exomeData\n      ? {\n          // Include variant fields so that the reads data resolver can access them.\n          ...sharedVariantFields,\n          //ac: exomeData.AC_adj.total,\n          //an: exomeData.AN_adj.total,\n          //ac_hemi: exomeData.nonpar ? exomeData.AC_adj.male : 0,\n          //ac_hom: exomeData.nhomalt_adj.total,\n\n          ac: exomeData.AC,\n          an: exomeData.AN,\n          //ac_hemi: exomeData.nonpar ? exomeData.AC_adj.male : 0,\n          ac_hom: exomeData.nhomalt,\n\n          ac_male: exomeData.AC_male,\n          an_male: exomeData.AN_male,\n          ac_male_hom: exomeData.nhomalt_male,\n\n\n          ac_female: exomeData.AC_female,\n          an_female: exomeData.AN_female,\n          ac_female_hom: exomeData.nhomalt_female,\n          \n          //faf95: formatFilteringAlleleFrequency(exomeData, 'faf95_adj'),\n          //faf99: formatFilteringAlleleFrequency(exomeData, 'faf99_adj'),\n          //filters: exomeData.filters,\n          populations: formatPopulations(exomeData),\n                    \n          qualityMetrics: {\n            \n            alleleBalance: {\n              //alt: formatHistogram(exomeData.ab_hist_alt),\n              alt: exomeData.allele_balance.alt_raw,\n            },\n            \n            genotypeDepth: {\n              //all: formatHistogram(exomeData.genotype_depth.all_raw),\n              //alt: formatHistogram(exomeData.genotype_depth.alt_raw),\n              all: exomeData.genotype_depth.all_raw,\n              alt: exomeData.genotype_depth.alt_raw,\n\n            },            \n            genotypeQuality: {\n              //all: formatHistogram(exomeData.gq_hist_all),\n              //alt: formatHistogram(exomeData.gq_hist_alt),\n\n              all: exomeData.genotype_quality.all_raw,\n              alt: exomeData.genotype_quality.alt_raw,\n\n            },\n\n            \n            siteQualityMetrics: {\n              ...exomeData.allele_info,\n              pab_max: exomeData.pab_max,\n              RF: exomeData.rf_tp_probability,\n              SiteQuality: exomeData.qual,\n            },\n          },\n\n        }\n      : null,\n\n    \n    //flags: ['lcr', 'segdup', 'lc_lof', 'lof_flag'].filter(flag => sharedData.flags[flag]),\n    spark_genome: genomeData\n      ? {\n          // Include variant fields so that the reads data resolver can access them.\n          ...sharedVariantFields,\n          //ac: genomeData.AC_adj.total,\n          //an: genomeData.AN_adj.total,\n          //ac_hemi: genomeData.nonpar ? genomeData.AC_adj.male : 0,\n          //ac_hom: genomeData.nhomalt_adj.total,\n          //faf95: formatFilteringAlleleFrequency(genomeData, 'faf95_adj'),\n          //faf99: formatFilteringAlleleFrequency(genomeData, 'faf99_adj'),\n          //filters: genomeData.filters,\n          \n          ac: genomeData.AC,\n          an: genomeData.AN,\n          //ac_hemi: exomeData.nonpar ? exomeData.AC_adj.male : 0,\n          ac_hom: genomeData.nhomalt,\n\n          ac_male: genomeData.AC_male,\n          an_male: genomeData.AN_male,\n          ac_male_hom: genomeData.nhomalt_male,\n\n\n          ac_female: genomeData.AC_female,\n          an_female: genomeData.AN_female,\n          ac_female_hom: genomeData.nhomalt_female,\n\n\n          populations: formatPopulations(genomeData),\n          \n          \n          qualityMetrics: {\n            alleleBalance: {\n              alt: formatHistogram(genomeData.ab_hist_alt),\n            },\n            genotypeDepth: {\n              all: formatHistogram(genomeData.dp_hist_all),\n              alt: formatHistogram(genomeData.dp_hist_alt),\n            },\n            genotypeQuality: {\n              all: formatHistogram(genomeData.gq_hist_all),\n              alt: formatHistogram(genomeData.gq_hist_alt),\n            },\n            siteQualityMetrics: {\n              ...genomeData.allele_info,\n              pab_max: genomeData.pab_max,\n              RF: genomeData.rf_tp_probability,\n              SiteQuality: genomeData.qual,\n            },\n          },\n        }\n      : null,\n\n    ssc_genome: sscGenomeData\n      ? {\n          // Include variant fields so that the reads data resolver can access them.\n          ...sharedVariantFields,\n          //ac: genomeData.AC_adj.total,\n          //an: genomeData.AN_adj.total,\n          //ac_hemi: genomeData.nonpar ? genomeData.AC_adj.male : 0,\n          //ac_hom: genomeData.nhomalt_adj.total,\n          //faf95: formatFilteringAlleleFrequency(genomeData, 'faf95_adj'),\n          //faf99: formatFilteringAlleleFrequency(genomeData, 'faf99_adj'),\n          //filters: genomeData.filters,\n          \n          ac: sscGenomeData.AC,\n          an: sscGenomeData.AN,\n          //ac_hemi: exomeData.nonpar ? exomeData.AC_adj.male : 0,\n          ac_hom: sscGenomeData.nhomalt,\n\n          ac_male: sscGenomeData.AC_male,\n          an_male: sscGenomeData.AN_male,\n          ac_male_hom: sscGenomeData.nhomalt_male,\n\n\n          ac_female: sscGenomeData.AC_female,\n          an_female: sscGenomeData.AN_female,\n          ac_female_hom: sscGenomeData.nhomalt_female,\n\n\n          populations: formatPopulations(sscGenomeData),\n          \n        }\n      : null,\n    */\n\n    //rsid: sharedData.rsid,\n    //faf95: { popmax: 0.00000514, popmax_population: 'NFE' }\n    mayo_variant_details: mayoData ? mayoData : null,\n    gnomad_faf95_popmax: gnomad_pop_data ? gnomad_pop_data.faf95.popmax : null,\n    gnomad_faf95_population: gnomad_pop_data ? gnomad_pop_data.faf95.popmax_population : null,\n\n    rsid: gnomad_data.data.variant ? gnomad_data.data.variant.rsid : null,\n    //rsid: null,\n    clinvarAlleleID:  clinVarData ? clinVarData.allele_id : null,\n    //denovoHC: denovoData ? denovoData.high_confidence_dnm : null,\n    sortedTranscriptConsequences: sharedData.sortedTranscriptConsequences || [],\n    in_silico_predictors: exomeData ? exomeData.in_silico_predictors : null\n  }\n}\n\nexport default fetchVariantDetails\n","import { fetchAllSearchResults } from '../../utilities/elasticsearch'\nimport { mergeOverlappingRegions } from '../../utilities/region'\nimport { lookupExonsByGeneId } from '../types/exon'\n\n//import { request } from \"graphql-request\"\n\nimport fetch from 'node-fetch'\n//import 'whatwg-fetch'\n\n/*\nimport {\n  annotateVariantsWithMNVFlag,\n  fetchGnomadMNVsByIntervals,\n} from './gnomadMultiNucleotideVariants'\n*/\n\nimport mergePcgcAndGnomadVariantSummaries from './mergePcgcAndGnomadVariants'\nimport mergeExomeAndGenomeVariantSummaries from './mergeExomeAndGenomeVariants'\nimport mergeSSCVariants from './mergeSSCVariants'\nimport shapeGnomadVariantSummary from './shapeGnomadVariantSummary'\n\n\nconst annotateVariantsWithMayoFlag = (variants, mayo) => {\n  const mayoVariantIds = new Set(mayo.reduce((acc, mayo) => acc.concat(mayo.variant_id), []))\n\n  variants.forEach(variant => {\n    if (mayoVariantIds.has(variant.variantId)) {\n      variant.flags.push('mayo')\n    }\n  })\n\n  return variants\n}\n\n\nconst fetchMayoVariants = async (ctx, geneId) => {\n\n  const hits = await fetchAllSearchResults(ctx.database.elastic, {\n\n    index: 'mayo_database',\n    size: 10000,\n    _source: [\n      'variant_id',\n      'MayoVariantID',\n    ],\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { GeneName: geneId } },\n          ],\n        },\n      },\n      sort: [{ pos: { order: 'asc' } }],\n    },\n  })\n\n  return hits.map(hit => hit._source) // eslint-disable-line no-underscore-dangle\n}\n\nconst fetchVariantsByGene = async (ctx, geneId, canonicalTranscriptId, subset) => {\n  const geneExons = await lookupExonsByGeneId(ctx.database.gnomad, geneId)\n  const filteredRegions = geneExons.filter(exon => exon.feature_type === 'CDS')\n  const sortedRegions = filteredRegions.sort((r1, r2) => r1.xstart - r2.xstart)\n  const padding = 75\n  const paddedRegions = sortedRegions.map(r => ({\n    ...r,\n    start: r.start - padding,\n    stop: r.stop + padding,\n    xstart: r.xstart - padding,\n    xstop: r.xstop + padding,\n  }))\n\n  const mergedRegions = mergeOverlappingRegions(paddedRegions)\n\n  const rangeQueries = mergedRegions.map(region => ({\n    range: {\n      pos: {\n        gte: region.start,\n        lte: region.stop,\n      },\n    },\n  }))\n\n  const hits = await fetchAllSearchResults(ctx.database.elastic, { \n      //index: 'bpkd_exomes',\n      index: 'pkd_exomes',\n      size: 10000,\n      _source: [\n        'AC_adj',\n        'AN_adj',\n        'nhomalt_adj',\n        'alt',\n        'chrom',\n        'filters',\n        'flags',\n        //'nonpar',\n        'pos',\n        'ref',\n        'rsid',\n        'sortedTranscriptConsequences',\n        'variant_id',\n        'xpos',\n        'AC',\n        'AN',\n        'AF',\n        'nhomalt',\n        'AC_raw',\n        'AN_raw',\n        'AF_raw',\n        'nhomalt_raw',\n        'AC_proband',\n        'AN_proband',\n        'AF_proband'\n      ],\n      /*\n      body: {\n        query : {\n          nested: {\n            path: 'sortedTranscriptConsequences',\n            query:{\n              match: {\n                'sortedTranscriptConsequences.gene_id': geneId\n              }\n            }\n          }\n        },*/\n      body: {\n        query: {\n          bool: {\n            filter: [\n              {\n                nested: {\n                  path: 'sortedTranscriptConsequences',\n                  query: {\n                    term: { 'sortedTranscriptConsequences.gene_id': geneId },\n                  },\n                },\n              },\n              { bool: { should: rangeQueries } },\n              //{ range: { ['AC_raw']: { gt: 0 } } },\n              { range: { ['AC']: { gt: 0 } } },\n \n            ],\n          },\n        },\n        sort: [{ pos: { order: 'asc' } }],\n      },\n    })\n\n\n  console.log(\"Done making first query - bpkd_exomes\")\n  const exomeVariants = hits.map(shapeGnomadVariantSummary({ type: 'gene', geneId }))\n  //console.log(exomeVariants)\n\n\n  //const allVariants = mergeSSCVariants(sparkVariants, ssc_genomeVariants)\n\n  const query = `{\n    gene(gene_id: \"${geneId}\" reference_genome: GRCh38) {\n      gene_id\n      symbol\n      variants(dataset: gnomad_r3){\n        pos\n        variantId\n        rsid\n        exome{\n          ac\n          an\n        }\n        genome{\n          ac\n          an\n        }\n      }\n    }\n  }\n  `\n\n  console.log(\"About to request data from gnomAD\")\n  \n  const gnomad_data = await fetch(\"https://gnomad.broadinstitute.org/api\", {\n    body: JSON.stringify({\n      query\n    }),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    }}).then(response => response.json())\n\n  const combinedVariants = mergePcgcAndGnomadVariantSummaries(exomeVariants,gnomad_data.data.gene.variants)\n  //console.log(gnomad_data.data.gene.symbol)\n  //const dnms = await fetchDenovos(ctx,geneId)\n  //annotateVariantsWithDenovoFlag(combinedVariants,dnms)\n  const mayo = await fetchMayoVariants(ctx,gnomad_data.data.gene.symbol)\n  //console.log(mayo)\n  annotateVariantsWithMayoFlag(combinedVariants,mayo)\n\n  return combinedVariants\n  \n\n}\n\nexport default fetchVariantsByGene\n","import { fetchAllSearchResults } from '../../utilities/elasticsearch'\nimport { getXpos } from '../../utilities/variant'\n//import { request } from \"graphql-request\"\n\n//import fetch from 'node-fetch'\n\n/*\nimport {\n  annotateVariantsWithMNVFlag,\n  fetchGnomadMNVsByIntervals,\n} from './gnomadMultiNucleotideVariants'\n*/\n\n//import mergeExomeAndGenomeVariantSummaries from './mergeExomeAndGenomeVariantSummaries'\nimport shapeGnomadVariantSummary from './shapeGnomadVariantSummary'\nimport mergeExomeAndGenomeVariantSummaries from './mergeExomeAndGenomeVariants'\nimport mergePcgcAndGnomadVariantSummaries from './mergePcgcAndGnomadVariants'\n\nconst fetchVariantsByRegion = async (ctx, { chrom, start, stop }, subset) => {\n\n\n  const hits = await fetchAllSearchResults(ctx.database.elastic, { \n//      index: 'pcgc_chr20_test',\n    index: 'pcgc_exomes',\n    type: 'variant',\n    size: 10000,\n    _source: [\n      'AC_adj',\n      'AN_adj',\n      'nhomalt_adj',\n      'alt',\n      'chrom',\n      'filters',\n      'flags',\n      //'nonpar',\n      'pos',\n      'ref',\n      'rsid',\n      'sortedTranscriptConsequences',\n      'variant_id',\n      'xpos',\n      'AC',\n      'AN',\n      'AF',\n      'nhomalt',\n      'AC_raw',\n      'AN_raw',\n      'AF_raw',\n      'nhomalt_raw',\n      'AC_proband',\n      'AN_proband',\n      'AF_proband'\n    ],\n      /*\n      body: {\n        query: {\n          bool: {\n            filter: [\n              {\n                nested: {\n                  path: 'sortedTranscriptConsequences',\n                  query: {\n                    term: { 'sortedTranscriptConsequences.gene_id': geneId },\n                  },\n                },\n              },\n              { bool: { should: rangeQueries } },\n              { range: { ['AC_raw']: { gt: 0 } } },\n            ],\n          },\n        },\n        sort: [{ pos: { order: 'asc' } }],\n      */\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            {\n              range: {\n                pos: {\n                  gte: start,\n                  lte: stop,\n                },\n              },\n            },\n            { range: { ['AC_raw']: { gt: 0 } } },\n          ],\n        },\n      },\n      sort: [{ pos: { order: 'asc' } }],\n    },\n  })\n\n  const exomeVariants = hits.map(shapeGnomadVariantSummary({ type: 'region'}))\n  //console.log(exomeVariants)\n\n  const ghits = await fetchAllSearchResults(ctx.database.elastic, { \n    index: 'ssc_genomes',\n    type: 'variant',\n    size: 10000,\n    _source: [\n      'AC_adj',\n      'AN_adj',\n      'nhomalt_adj',\n      'alt',\n      'chrom',\n      'filters',\n      'flags',        \n      'pos',\n      'ref',\n      'rsid',        \n      'sortedTranscriptConsequences',\n      'variant_id',\n      'xpos',\n      'AC',\n      'AN',\n      'AF',\n      'nhomalt',\n      'AC_raw',\n      'AN_raw',\n      'AF_raw',\n      'nhomalt_raw',\n      'AC_proband',\n      'AN_proband',\n      'AF_proband'\n    ],\n    /*\n    body: {\n      query : {\n        nested: {\n          path: 'sortedTranscriptConsequences',\n          query:{\n            match: {\n              'sortedTranscriptConsequences.gene_id': geneId\n            }\n          }\n        }\n      },\n      sort: [{ pos: { order: 'asc' } }],\n    },\n    */\n    body: {\n      query: {\n        bool: {\n          filter: [\n            { term: { chrom } },\n            {\n              range: {\n                pos: {\n                  gte: start,\n                  lte: stop,\n                },\n              },\n            },\n          ],\n        },\n      },\n      sort: [{ pos: { order: 'asc' } }],\n    },\n  })\n\n  const genomeVariants = ghits.map(shapeGnomadVariantSummary({ type: 'region'}))\n  //console.log(genomeVariants)\n\n  const exomeAndGenomeVariants = mergeExomeAndGenomeVariantSummaries(exomeVariants, genomeVariants)\n\n\n\n  const query = `{\n    region(start: ${start}, stop: ${stop}, chrom: \"${chrom}\", reference_genome: GRCh38) {\n      variants(dataset: gnomad_r3){\n        pos\n        variantId\n        rsid\n        exome{\n          ac\n          an\n        }\n        genome{\n          ac\n          an\n        }\n      }\n    }\n  }\n  `\n  //request(\"http://gnomad.broadinstitute.org/api\", query).then(console.log).catch(console.error)\n  //console.log(\"In here 33\")\n  //const gnomad_data = request(\"http://gnomad.broadinstitute.org/api\", query).then(console.log).catch(console.error)\n\n  //const gnomad_data = await request(\"https://gnomad.broadinstitute.org/api\", query)\n  //console.log(gnomad_data.region.variants)\n\n  //const combinedVariants = mergePcgcAndGnomadVariantSummaries(exomeVariants,gnomad_data.gene.variants)\n  \n  //const combinedVariants = mergePcgcAndGnomadVariantSummaries(exomeAndGenomeVariants,gnomad_data.region.variants)\n  //console.log(combinedVariants)\n  //return combinedVariants\n\n  return exomeAndGenomeVariants\n\n  /*\n  const requests = [\n    { index: 'gnomad_exomes_2_1_1', subset },\n    // All genome samples are non_cancer, so separate non-cancer numbers are not stored\n    { index: 'gnomad_genomes_2_1_1', subset: subset === 'non_cancer' ? 'gnomad' : subset },\n  ]\n\n  const [exomeVariants, genomeVariants] = await Promise.all(\n    requests.map(async ({ index, subset }) => {\n      const hits = await fetchAllSearchResults(ctx.database.elastic, {\n        index,\n        type: 'variant',\n        size: 10000,\n        _source: [\n          `${subset}.AC_adj`,\n          `${subset}.AN_adj`,\n          `${subset}.nhomalt_adj`,\n          'alt',\n          'chrom',\n          'filters',\n          'flags',\n          'nonpar',\n          'pos',\n          'ref',\n          'rsid',\n          'sortedTranscriptConsequences',\n          'variant_id',\n          'xpos',\n        ],\n        body: {\n          query: {\n            bool: {\n              filter: [\n                { term: { chrom } },\n                {\n                  range: {\n                    pos: {\n                      gte: start,\n                      lte: stop,\n                    },\n                  },\n                },\n                { range: { [`${subset}.AC_raw`]: { gt: 0 } } },\n              ],\n            },\n          },\n          sort: [{ pos: { order: 'asc' } }],\n        },\n      })\n\n      return hits.map(shapeGnomadVariantSummary(subset, { type: 'region' }))\n    })\n  )\n\n  const combinedVariants = mergeExomeAndGenomeVariantSummaries(exomeVariants, genomeVariants)\n\n  // TODO: This can be fetched in parallel with exome/genome data\n  const mnvs = await fetchGnomadMNVsByIntervals(ctx, [\n    { xstart: getXpos(chrom, start), xstop: getXpos(chrom, stop) },\n  ])\n  annotateVariantsWithMNVFlag(combinedVariants, mnvs)\n\n  return combinedVariants\n  */\n}\n\nexport default fetchVariantsByRegion\n","import {\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\n\nexport const HaplogroupType = new GraphQLObjectType({\n  name: 'Haplogroup',\n  fields: {\n    id: { type: GraphQLString },\n    an: { type: GraphQLInt },\n    ac_het: { type: GraphQLInt },\n    ac_hom: { type: GraphQLInt },\n  },\n})\n\n\nexport const PopulationType = new GraphQLObjectType({\n  name: 'Population',\n  fields: {\n    id: { type: GraphQLString },\n    an: { type: GraphQLInt },\n    ac_het: { type: GraphQLInt },\n    ac_hom: { type: GraphQLInt },\n  },\n})\n","const mergeExomeAndGenomeVariantSummaries = (exomeVariants, genomeVariants) => {\n  const mergedVariants = []\n\n  \n  while (exomeVariants.length || genomeVariants.length) {\n    const currentExomeVariant = exomeVariants[0]\n    const currentGenomeVariant = genomeVariants[0]\n\n    if (currentGenomeVariant === undefined) {\n      mergedVariants.push(exomeVariants.shift())\n    } else if (currentExomeVariant === undefined) {\n      mergedVariants.push(genomeVariants.shift())\n    } else if (currentExomeVariant.pos < currentGenomeVariant.pos) {\n      mergedVariants.push(exomeVariants.shift())\n    } else if (currentGenomeVariant.pos < currentExomeVariant.pos) {\n      mergedVariants.push(genomeVariants.shift())\n    } else {\n      const currentPosition = currentExomeVariant.pos\n\n      const exomeVariantsAtThisPosition = []\n      while (exomeVariants.length && exomeVariants[0].pos === currentPosition) {\n        exomeVariantsAtThisPosition.push(exomeVariants.shift())\n      }\n      const genomeVariantsAtThisPosition = []\n      while (genomeVariants.length && genomeVariants[0].pos === currentPosition) {\n        genomeVariantsAtThisPosition.push(genomeVariants.shift())\n      }\n\n      exomeVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n      genomeVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n\n      while (exomeVariantsAtThisPosition.length || genomeVariantsAtThisPosition.length) {\n        const currentExomeVariantAtThisPosition = exomeVariantsAtThisPosition[0]\n        const currentGenomeVariantAtThisPosition = genomeVariantsAtThisPosition[0]\n\n        if (currentGenomeVariantAtThisPosition === undefined) {\n          mergedVariants.push(exomeVariantsAtThisPosition.shift())\n        } else if (currentExomeVariantAtThisPosition === undefined) {\n          mergedVariants.push(genomeVariantsAtThisPosition.shift())\n        } else if (\n          currentExomeVariantAtThisPosition.variantId.localeCompare(\n            currentGenomeVariantAtThisPosition.variantId\n          ) < 0\n        ) {\n          mergedVariants.push(exomeVariantsAtThisPosition.shift())\n        } else if (\n          currentExomeVariantAtThisPosition.variantId.localeCompare(\n            currentGenomeVariantAtThisPosition.variantId\n          ) > 0\n        ) {\n          mergedVariants.push(genomeVariantsAtThisPosition.shift())\n        } else {\n          mergedVariants.push({\n            ...exomeVariantsAtThisPosition.shift(),\n            //genome: genomeVariantsAtThisPosition.shift().genome,\n            spark_genome: genomeVariantsAtThisPosition.shift().spark_genome,\n\n          })\n        }\n      }\n    }\n  }\n  \n  return mergedVariants\n}\n\nexport default mergeExomeAndGenomeVariantSummaries\n","const mergeExomeAndsscVariantsummaries = (sparkVariants, sscVariants) => {\n  const mergedVariants = []\n\n  \n  while (sparkVariants.length || sscVariants.length) {\n    const currentSparkVariant = sparkVariants[0]\n    const currentSscVariant = sscVariants[0]\n\n    if (currentSscVariant === undefined) {\n      mergedVariants.push(sparkVariants.shift())\n    } else if (currentSparkVariant === undefined) {\n      mergedVariants.push(sscVariants.shift())\n    } else if (currentSparkVariant.pos < currentSscVariant.pos) {\n      mergedVariants.push(sparkVariants.shift())\n    } else if (currentSscVariant.pos < currentSparkVariant.pos) {\n      mergedVariants.push(sscVariants.shift())\n    } else {\n      const currentPosition = currentSparkVariant.pos\n\n      const sparkVariantsAtThisPosition = []\n      while (sparkVariants.length && sparkVariants[0].pos === currentPosition) {\n        sparkVariantsAtThisPosition.push(sparkVariants.shift())\n      }\n      const sscVariantsAtThisPosition = []\n      while (sscVariants.length && sscVariants[0].pos === currentPosition) {\n        sscVariantsAtThisPosition.push(sscVariants.shift())\n      }\n\n      sparkVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n      sscVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n\n      while (sparkVariantsAtThisPosition.length || sscVariantsAtThisPosition.length) {\n        const currentSparkVariantAtThisPosition = sparkVariantsAtThisPosition[0]\n        const currentSscVariantAtThisPosition = sscVariantsAtThisPosition[0]\n\n        if (currentSscVariantAtThisPosition === undefined) {\n          mergedVariants.push(sparkVariantsAtThisPosition.shift())\n        } else if (currentSparkVariantAtThisPosition === undefined) {\n          mergedVariants.push(sscVariantsAtThisPosition.shift())\n        } else if (\n          currentSparkVariantAtThisPosition.variantId.localeCompare(\n            currentSscVariantAtThisPosition.variantId\n          ) < 0\n        ) {\n          mergedVariants.push(sparkVariantsAtThisPosition.shift())\n        } else if (\n          currentSparkVariantAtThisPosition.variantId.localeCompare(\n            currentSscVariantAtThisPosition.variantId\n          ) > 0\n        ) {\n          mergedVariants.push(sscVariantsAtThisPosition.shift())\n        } else {\n          mergedVariants.push({\n            ...sparkVariantsAtThisPosition.shift(),\n            //genome: sscVariantsAtThisPosition.shift().genome,\n            ssc_genome: sscVariantsAtThisPosition.shift().ssc_genome,\n\n          })\n        }\n      }\n    }\n  }\n  \n  return mergedVariants\n}\n\nexport default mergeExomeAndsscVariantsummaries\n","const mergePcgcAndGnomadVariantSummaries = (pcgcVariants, gnomadVariants) => {\n  const mergedVariants = []\n\n  while (pcgcVariants.length) {\n    const currentPcgcVariant = pcgcVariants[0]\n    const currentGnomadVariant = gnomadVariants[0]\n\n    if (currentGnomadVariant === undefined) {\n      mergedVariants.push(pcgcVariants.shift())\n    } \n    else if (currentPcgcVariant === undefined) {\n      //mergedVariants.push(genomeVariants.shift())\n      gnomadVariants.shift()\n\n    } \n    else if (currentPcgcVariant.pos < currentGnomadVariant.pos) {\n      mergedVariants.push(pcgcVariants.shift())\n    } \n    else if (currentGnomadVariant.pos < currentPcgcVariant.pos) {\n      gnomadVariants.shift()      \n      //mergedVariants.push(genomeVariants.shift())\n    } \n\n    else {\n      const currentPosition = currentPcgcVariant.pos\n\n      const pcgcVariantsAtThisPosition = []\n      \n      while (pcgcVariants.length && pcgcVariants[0].pos === currentPosition) {\n        pcgcVariantsAtThisPosition.push(pcgcVariants.shift())\n      }\n      const gnomadVariantsAtThisPosition = []\n      \n      while (gnomadVariants.length && gnomadVariants[0].pos === currentPosition) {\n        gnomadVariantsAtThisPosition.push(gnomadVariants.shift())\n      }\n\n      pcgcVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n      gnomadVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n\n      while (pcgcVariantsAtThisPosition.length || gnomadVariantsAtThisPosition.length) {\n        const currentPcgcVariantAtThisPosition = pcgcVariantsAtThisPosition[0]\n        const currentGnomadVariantAtThisPosition = gnomadVariantsAtThisPosition[0]\n\n        if (currentGnomadVariantAtThisPosition === undefined) {\n          mergedVariants.push(pcgcVariantsAtThisPosition.shift())\n        } \n        else if (currentPcgcVariantAtThisPosition === undefined) {\n          //mergedVariants.push(genomeVariantsAtThisPosition.shift())\n          gnomadVariantsAtThisPosition.shift()\n        } \n        else if (currentPcgcVariantAtThisPosition.variantId.localeCompare(currentGnomadVariantAtThisPosition.variantId) < 0) {\n          mergedVariants.push(pcgcVariantsAtThisPosition.shift())\n        } \n        else if (currentPcgcVariantAtThisPosition.variantId.localeCompare(currentGnomadVariantAtThisPosition.variantId) > 0) {\n          //mergedVariants.push(genomeVariantsAtThisPosition.shift())\n          gnomadVariantsAtThisPosition.shift()\n        } \n        else {\n          const tmp_gnomad = gnomadVariantsAtThisPosition.shift()\n          const tmp_push = pcgcVariantsAtThisPosition.shift()\n          \n\n          if(tmp_gnomad.exome){\n            tmp_push.ac_gnomad += tmp_gnomad.exome.ac\n            tmp_push.an_gnomad += tmp_gnomad.exome.an\n            //console.log(tmp_push.variantId)\n            //console.log(tmp_gnomad.exome.ac)\n            //console.log(tmp_push.exome.ac_gnomad)\n            //console.log(tmp_push)\n          }\n\n          if(tmp_gnomad.genome){\n            tmp_push.ac_gnomad += tmp_gnomad.genome.ac\n            tmp_push.an_gnomad += tmp_gnomad.genome.an\n            //console.log(tmp_push.variantId)\n            //console.log(tmp_gnomad.exome.ac)\n            //console.log(tmp_push.exome.ac_gnomad)\n            //console.log(tmp_push)\n          }\n\n          // take rsid from gnomAD\n          if(tmp_gnomad.rsid){\n            tmp_push.rsid = tmp_gnomad.rsid\n          }\n\n          mergedVariants.push(tmp_push)\n\n          /*\n          mergedVariants.push({\n            ...pcgcVariantsAtThisPosition.shift(),\n            //gnomad_ac: gnomadVariantsAtThisPosition.shift().exome.ac,\n          })*/\n        }\n      }\n    }\n  }\n\n\n  /* \n  while (exomeVariants.length || genomeVariants.length) {\n    const currentExomeVariant = exomeVariants[0]\n    const currentGenomeVariant = genomeVariants[0]\n\n    if (currentGenomeVariant === undefined) {\n      mergedVariants.push(exomeVariants.shift())\n    } else if (currentExomeVariant === undefined) {\n      mergedVariants.push(genomeVariants.shift())\n    } else if (currentExomeVariant.pos < currentGenomeVariant.pos) {\n      mergedVariants.push(exomeVariants.shift())\n    } else if (currentGenomeVariant.pos < currentExomeVariant.pos) {\n      mergedVariants.push(genomeVariants.shift())\n    } else {\n      const currentPosition = currentExomeVariant.pos\n\n      const exomeVariantsAtThisPosition = []\n      while (exomeVariants.length && exomeVariants[0].pos === currentPosition) {\n        exomeVariantsAtThisPosition.push(exomeVariants.shift())\n      }\n      const genomeVariantsAtThisPosition = []\n      while (genomeVariants.length && genomeVariants[0].pos === currentPosition) {\n        genomeVariantsAtThisPosition.push(genomeVariants.shift())\n      }\n\n      exomeVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n      genomeVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n\n      while (exomeVariantsAtThisPosition.length || genomeVariantsAtThisPosition.length) {\n        const currentExomeVariantAtThisPosition = exomeVariantsAtThisPosition[0]\n        const currentGenomeVariantAtThisPosition = genomeVariantsAtThisPosition[0]\n\n        if (currentGenomeVariantAtThisPosition === undefined) {\n          mergedVariants.push(exomeVariantsAtThisPosition.shift())\n        } else if (currentExomeVariantAtThisPosition === undefined) {\n          mergedVariants.push(genomeVariantsAtThisPosition.shift())\n        } else if (\n          currentExomeVariantAtThisPosition.variantId.localeCompare(\n            currentGenomeVariantAtThisPosition.variantId\n          ) < 0\n        ) {\n          mergedVariants.push(exomeVariantsAtThisPosition.shift())\n        } else if (\n          currentExomeVariantAtThisPosition.variantId.localeCompare(\n            currentGenomeVariantAtThisPosition.variantId\n          ) > 0\n        ) {\n          mergedVariants.push(genomeVariantsAtThisPosition.shift())\n        } else {\n          mergedVariants.push({\n            ...exomeVariantsAtThisPosition.shift(),\n            genome: genomeVariantsAtThisPosition.shift().genome,\n          })\n        }\n      }\n    }\n  }\n  */\n  return mergedVariants\n}\n\nexport default mergePcgcAndGnomadVariantSummaries\n","const mergeSSCVariants = (exomeVariants, genomeVariants) => {\n  const mergedVariants = []\n\n  \n  while (exomeVariants.length || genomeVariants.length) {\n    const currentExomeVariant = exomeVariants[0]\n    const currentGenomeVariant = genomeVariants[0]\n\n    if (currentGenomeVariant === undefined) {\n      mergedVariants.push(exomeVariants.shift())\n    } else if (currentExomeVariant === undefined) {\n      mergedVariants.push(genomeVariants.shift())\n    } else if (currentExomeVariant.pos < currentGenomeVariant.pos) {\n      mergedVariants.push(exomeVariants.shift())\n    } else if (currentGenomeVariant.pos < currentExomeVariant.pos) {\n      mergedVariants.push(genomeVariants.shift())\n    } else {\n      const currentPosition = currentExomeVariant.pos\n\n      const exomeVariantsAtThisPosition = []\n      while (exomeVariants.length && exomeVariants[0].pos === currentPosition) {\n        exomeVariantsAtThisPosition.push(exomeVariants.shift())\n      }\n      const genomeVariantsAtThisPosition = []\n      while (genomeVariants.length && genomeVariants[0].pos === currentPosition) {\n        genomeVariantsAtThisPosition.push(genomeVariants.shift())\n      }\n\n      exomeVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n      genomeVariantsAtThisPosition.sort((v1, v2) => v1.variantId.localeCompare(v2.variantId))\n\n      while (exomeVariantsAtThisPosition.length || genomeVariantsAtThisPosition.length) {\n        const currentExomeVariantAtThisPosition = exomeVariantsAtThisPosition[0]\n        const currentGenomeVariantAtThisPosition = genomeVariantsAtThisPosition[0]\n\n        if (currentGenomeVariantAtThisPosition === undefined) {\n          mergedVariants.push(exomeVariantsAtThisPosition.shift())\n        } else if (currentExomeVariantAtThisPosition === undefined) {\n          mergedVariants.push(genomeVariantsAtThisPosition.shift())\n        } else if (\n          currentExomeVariantAtThisPosition.variantId.localeCompare(\n            currentGenomeVariantAtThisPosition.variantId\n          ) < 0\n        ) {\n          mergedVariants.push(exomeVariantsAtThisPosition.shift())\n        } else if (\n          currentExomeVariantAtThisPosition.variantId.localeCompare(\n            currentGenomeVariantAtThisPosition.variantId\n          ) > 0\n        ) {\n          mergedVariants.push(genomeVariantsAtThisPosition.shift())\n        } else {\n          mergedVariants.push({\n            ...exomeVariantsAtThisPosition.shift(),\n            //genome: genomeVariantsAtThisPosition.shift().genome,\n            ssc_genome: genomeVariantsAtThisPosition.shift().ssc_genome,\n\n          })\n        }\n      }\n    }\n  }\n  \n  return mergedVariants\n}\n\nexport default mergeSSCVariants\n","const rankedSVGeneConsequences = [\n  'lof',\n  'copy_gain',\n  'dup_lof',\n  'msv_exon_ovr',\n  'dup_partial',\n  'utr',\n  'promoter',\n  'inv_span',\n  'intronic',\n]\n\nexport default rankedSVGeneConsequences\n","//import POPULATIONS from './populations'\n\nconst POPULATIONS = ['afr', 'amr', 'eas', 'eur', 'oth', 'sas']\n\n\nconst getFlags = (variantData, transcriptConsequence) => {\n  const flags = []\n\n  if (variantData.flags.lcr) {\n    flags.push('lcr')\n  }\n\n  if (variantData.flags.segdup) {\n    flags.push('segdup')\n  }\n\n  if (variantData.flags.lof_flag) {\n    flags.push('lof_flag')\n  }\n\n  // gnomAD 2.1 variants may have an LC LoF flag if they have some LoF category VEP anotations\n  // on non-protein-coding transcripts. However, other transcript consequences will be sorted\n  // above the non-coding consequences. Checking the displayed consequence's category here\n  // prevents the case where an LC LoF flag will be shown next to a missense/synonymous/other\n  // VEP annotation on the gene page.\n  // See #364.\n  const isLofOnNonCodingTranscript =\n    transcriptConsequence.lof === 'NC' ||\n    (transcriptConsequence.category === 'lof' && !transcriptConsequence.lof)\n  if (\n    variantData.flags.lc_lof &&\n    transcriptConsequence.category === 'lof' &&\n    !isLofOnNonCodingTranscript\n  ) {\n    flags.push('lc_lof')\n  }\n\n  // This flag isn't working properly\n  /*\n  if (isLofOnNonCodingTranscript) {\n    flags.push('nc_transcript')\n  }\n  */\n\n  return flags\n}\n\nconst shapeGnomadVariantSummary = (context) => {\n  \n  let getConsequence\n  switch (context.type) {\n    case 'gene':\n      getConsequence = variant =>\n        (variant.sortedTranscriptConsequences || []).find(csq => csq.gene_id === context.geneId)\n      break\n    case 'region':\n      getConsequence = variant => (variant.sortedTranscriptConsequences || [])[0]\n      break\n    case 'transcript':\n      getConsequence = variant =>\n        (variant.sortedTranscriptConsequences || []).find(\n          csq => csq.transcript_id === context.transcriptId\n        )\n      break\n    default:\n      throw Error(`Invalid context for shapeGnomadVariantSummary: ${context.type}`)\n  }\n  \n\n  // console.log(\"In function\")\n  return esHit => {\n    // eslint-disable-next-line no-underscore-dangle\n    const variantData = esHit._source\n    // console.log(variantData)\n\n    \n    // eslint-disable-next-line no-underscore-dangle\n    const isExomeVariant = esHit._index === 'spark_exomes'\n\n    //const isExomeVariant = esHit._index === 'pcgc_exomes'\n\n    /*\n    const ac = variantData[subsetKey].AC_adj.total\n    const an = variantData[subsetKey].AN_adj.total\n    */\n    const transcriptConsequence = getConsequence(variantData) || {}\n    \n\n    //console.log(variantData.AN_adj['eur'])\n    const data_block = {\n      \n      //ac: variantData.AC_raw,\n      //ac_hom: variantData.nhomalt_raw,\n      //an: variantData.AN_raw,\n      //af: variantData.AF_raw,        \n\n      ac: variantData.AC,\n      ac_hom: variantData.nhomalt,\n      an: variantData.AN,\n      af: variantData.AF,        \n      \n      ac_proband: variantData.AC_proband,\n      an_proband: variantData.AN_proband,\n      af_proband: variantData.AF_proband,\n\n      filters: variantData.filters || [],\n      populations: POPULATIONS.map(popId => ({\n        id: popId.toUpperCase(),\n        ac: variantData.AC_adj[popId] || 0,\n        an: variantData.AN_adj[popId] || 0,\n        //an: variantData.AN_adj[popId],\n\n        //ac_hemi: variantData.nonpar ? (variantData[subsetKey].AC_adj[popId] || {}).male || 0 : 0,\n        ac_hom: variantData.nhomalt_adj[popId] || 0,\n      }))\n    }\n\n    return {\n      // Variant ID fields\n      alt: variantData.alt,\n      chrom: variantData.chrom,\n      pos: variantData.pos,\n      ref: variantData.ref,\n      variantId: variantData.variant_id,\n      xpos: variantData.xpos,\n      // Other fields\n      \n      consequence: transcriptConsequence.major_consequence,\n      consequence_in_canonical_transcript: !!transcriptConsequence.canonical,\n      flags: getFlags(variantData, transcriptConsequence),\n      //flags: [],\n      hgvs: transcriptConsequence.hgvs,\n      hgvsc: transcriptConsequence.hgvsc ? transcriptConsequence.hgvsc.split(':')[1] : null,\n      hgvsp: transcriptConsequence.hgvsp ? transcriptConsequence.hgvsp.split(':')[1] : null,\n      rsid: variantData.rsid,\n      ac_gnomad: 0,\n      an_gnomad: 0,\n\n      //bpkd_exome: esHit._index === 'bpkd_exomes' ? data_block : null,\n      bpkd_exome: esHit._index === 'pkd_exomes' ? data_block : null,\n\n      //spark_genome: esHit._index === 'spark_genomes' ? data_block : null,\n      //spark_exome: esHit._index === 'spark_exomes' ? data_block : null,\n      //ssc_genome: esHit._index === 'ssc_genomes' ? data_block : null,\n      \n      //spark_exome{\n      //[isExomeVariant ? 'spark_genome' : 'spark_exome']: null,\n      //[isExomeVariant ? 'spark_exome' : 'spark_genome']: {\n      //[esHit._index === 'pcgc_exomes' ? 'spark_genome' : 'spark_exome']\n\n      //[esHit._index === 'pcgc_exomes' ? 'spark_exome' : 'spark_genome'] : { \n\n      //exome: {\n        /*\n        ac: variantData.AC,\n        ac_hom: variantData.nhomalt,\n        an: variantData.AN,\n        af: variantData.AF,\n        */\n        //ac_hemi: variantData.nonpar ? variantData[subsetKey].AC_adj.male : 0,\n        //af: an ? ac / an : 0,\n\n        /*\n        ac: variantData.AC_raw,\n        ac_hom: variantData.nhomalt_raw,\n        an: variantData.AN_raw,\n        af: variantData.AF_raw,        \n\n        ac_proband: variantData.AC_proband,\n        an_proband: variantData.AN_proband,\n        af_proband: variantData.AF_proband,\n\n        filters: variantData.filters || [],\n        populations: POPULATIONS.map(popId => ({\n          id: popId.toUpperCase(),\n          ac: variantData.AC_adj[popId] || 0,\n          an: variantData.AN_adj[popId] || 0,\n          //an: variantData.AN_adj[popId],\n\n          //ac_hemi: variantData.nonpar ? (variantData[subsetKey].AC_adj[popId] || {}).male || 0 : 0,\n          ac_hom: variantData.nhomalt_adj[popId] || 0,\n        })),\n      },*/\n\n    } //return\n\n  }// return eHit\n\n}// function\n\n//sudo lsof -i -P -n | grep LISTEN\nexport default shapeGnomadVariantSummary\n","//import POPULATIONS from './populations'\n\nconst POPULATIONS = ['afr', 'amr', 'eas', 'eur', 'oth', 'sas']\n\n\nconst getFlags = (variantData, transcriptConsequence) => {\n  const flags = []\n\n  if (variantData.flags.lcr) {\n    flags.push('lcr')\n  }\n\n  if (variantData.flags.segdup) {\n    flags.push('segdup')\n  }\n\n  if (variantData.flags.lof_flag) {\n    flags.push('lof_flag')\n  }\n\n  // gnomAD 2.1 variants may have an LC LoF flag if they have some LoF category VEP anotations\n  // on non-protein-coding transcripts. However, other transcript consequences will be sorted\n  // above the non-coding consequences. Checking the displayed consequence's category here\n  // prevents the case where an LC LoF flag will be shown next to a missense/synonymous/other\n  // VEP annotation on the gene page.\n  // See #364.\n  const isLofOnNonCodingTranscript =\n    transcriptConsequence.lof === 'NC' ||\n    (transcriptConsequence.category === 'lof' && !transcriptConsequence.lof)\n  if (\n    variantData.flags.lc_lof &&\n    transcriptConsequence.category === 'lof' &&\n    !isLofOnNonCodingTranscript\n  ) {\n    flags.push('lc_lof')\n  }\n\n  // This flag isn't working properly\n  /*\n  if (isLofOnNonCodingTranscript) {\n    flags.push('nc_transcript')\n  }\n  */\n\n  return flags\n}\n\nconst shapeMitoVariantSummary = (context) => {\n  \n  let getConsequence\n  switch (context.type) {\n    case 'gene':\n      getConsequence = variant =>\n        (variant.sortedTranscriptConsequences || []).find(csq => csq.gene_id === context.geneId)\n      break\n    case 'region':\n      getConsequence = variant => (variant.sortedTranscriptConsequences || [])[0]\n      break\n    case 'transcript':\n      getConsequence = variant =>\n        (variant.sortedTranscriptConsequences || []).find(\n          csq => csq.transcript_id === context.transcriptId\n        )\n      break\n    default:\n      throw Error(`Invalid context for shapeGnomadVariantSummary: ${context.type}`)\n  }\n  \n\n  // console.log(\"In function\")\n  return esHit => {\n    // eslint-disable-next-line no-underscore-dangle\n    const variantData = esHit._source\n    // console.log(variantData)\n\n    \n    // eslint-disable-next-line no-underscore-dangle\n    //const isExomeVariant = esHit._index === 'pcgc_exomes'\n\n    /*\n    const ac = variantData[subsetKey].AC_adj.total\n    const an = variantData[subsetKey].AN_adj.total\n    */\n    const transcriptConsequence = getConsequence(variantData) || {}\n    \n\n    //console.log(variantData.AN_adj['eur'])\n    \n    const data_block = {\n      ac: variantData.ac,\n      ac_hom: variantData.ac_hom,\n      ac_het: variantData.ac_het,\n      an: variantData.an,\n      af: variantData.af,\n      max_heteroplasmy: variantData.max_heteroplasmy        \n\n      //ac_proband: variantData.AC_proband,\n      //an_proband: variantData.AN_proband,\n      //af_proband: variantData.AF_proband,\n\n      //filters: variantData.filters || [],\n      /*\n      populations: POPULATIONS.map(popId => ({\n        id: popId.toUpperCase(),\n        ac: variantData.AC_adj[popId] || 0,\n        an: variantData.AN_adj[popId] || 0,\n        //an: variantData.AN_adj[popId],\n\n        //ac_hemi: variantData.nonpar ? (variantData[subsetKey].AC_adj[popId] || {}).male || 0 : 0,\n        ac_hom: variantData.nhomalt_adj[popId] || 0,\n      }))\n      */\n    }\n    \n\n    return {\n      // Variant ID fields\n      alt: variantData.alt,\n      chrom: variantData.chrom,\n      pos: variantData.pos,\n      ref: variantData.ref,\n      variantId: variantData.variant_id,\n      xpos: variantData.xpos,\n      // Other fields\n      \n      consequence: transcriptConsequence.major_consequence,\n      consequence_in_canonical_transcript: !!transcriptConsequence.canonical,\n      //flags: getFlags(variantData, transcriptConsequence),\n      flags: [],\n      hgvs: transcriptConsequence.hgvs,\n      hgvsc: transcriptConsequence.hgvsc ? transcriptConsequence.hgvsc.split(':')[1] : null,\n      hgvsp: transcriptConsequence.hgvsp ? transcriptConsequence.hgvsp.split(':')[1] : null,\n      \n      //rsid: variantData.rsid,\n      //ac_gnomad: 0,\n      //an_gnomad: 0,\n\n      spark_genome: esHit._index === 'mito_test4' ? data_block : null,\n      ssc_genome: esHit._index === 'ssc_mito' ? data_block : null,\n\n\n    } //return\n\n  }// return eHit\n\n}// function\n\n//sudo lsof -i -P -n | grep LISTEN\nexport default shapeMitoVariantSummary\n","import {\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\n\nexport const TranscriptConsequenceType = new GraphQLObjectType({\n  name: 'TranscriptConsequence',\n  fields: {\n    amino_acids: { type: GraphQLString },\n    biotype: { type: GraphQLString },\n    canonical: { type: GraphQLBoolean },\n    category: { type: GraphQLString },\n    cdna_start: { type: GraphQLInt },\n    cdna_end: { type: GraphQLInt },\n    codons: { type: GraphQLString },\n    consequence_terms: { type: new GraphQLList(GraphQLString) },\n    domains: { type: GraphQLString },\n    gene_id: { type: GraphQLString },\n    gene_symbol: { type: GraphQLString },\n    gene_symbol_source: { type: GraphQLString },\n    hgvs: { type: GraphQLString },\n    hgvsc: { type: GraphQLString },\n    hgvsp: { type: GraphQLString },\n    lof: { type: GraphQLString },\n    lof_flags: { type: GraphQLString },\n    lof_filter: { type: GraphQLString },\n    lof_info: { type: GraphQLString },\n    major_consequence: { type: GraphQLString },\n    major_consequence_rank: { type: GraphQLInt },\n    polyphen_prediction: { type: GraphQLString },\n    protein_id: { type: GraphQLString },\n    sift_prediction: { type: GraphQLString },\n    transcript_id: { type: GraphQLString },\n  },\n})\n","export class UserVisibleError extends Error {\n  constructor(...args) {\n    super(...args)\n    this.name = 'UserVisibleError'\n    this.extensions = {\n      isUserVisible: true,\n    }\n  }\n}\n","import {\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql'\n\nimport { getXpos } from '../utilities/variant'\n\n\n/*\nimport { AggregateQualityMetricsType } from './datasets/aggregateQualityMetrics'\nimport {\n  MultiNucleotideVariantDetailsType,\n  fetchGnomadMNVDetails,\n} from './datasets/gnomad_r2_1/gnomadMultiNucleotideVariants'\n\nimport fetchGnomadStructuralVariantDetails from './datasets/gnomad_sv_r2/fetchGnomadStructuralVariantDetails'\nimport GnomadStructuralVariantDetailsType from './datasets/gnomad_sv_r2/GnomadStructuralVariantDetailsType'\n\n*/\nimport fetchGnomadStructuralVariantDetails from './datasets/fetchGnomadStructuralVariantDetails'\nimport GnomadStructuralVariantDetailsType from './datasets/GnomadStructuralVariantDetailsType'\n\n\nimport geneType, {\n  lookupGeneByGeneId,\n  lookupGeneByName,\n} from './types/gene'\n\nimport transcriptType, {\n  lookupTranscriptsByTranscriptId,\n} from './types/transcript'\n\nimport mitoGeneType from './types/mito_gene'\nimport regionType from './types/region'\n\nimport { SearchResultType, resolveSearchResults } from './types/search'\nimport { VariantInterface } from './types/variant'\nimport { MitoVariantInterface } from './types/mito_variant'\n\n\n//import { datasetArgumentTypeForMethod } from './datasets/datasetArgumentTypes'\n//import datasetsConfig, { datasetSpecificTypes } from './datasets/datasetsConfig'\n\nimport fetchVariantDetails from './datasets/fetchVariantDetails'\nimport fetchMitoVariantDetails from './datasets/fetchMitoVariantDetails'\n\nimport VariantDetailsType from './datasets/VariantDetailsType'\nimport MitoVariantDetailsType from './datasets/MitoVariantDetailsType'\n\n\nconst rootType = new GraphQLObjectType({\n  name: 'Root',\n  description: `\nThe fields below allow for different ways to look up PCGC data. Click on the the Gene, Variant, or Region types to see more information.\n  `,\n  fields: () => ({\n/*\n    aggregateQualityMetrics: {\n      type: AggregateQualityMetricsType,\n      args: {\n        dataset: { type: datasetArgumentTypeForMethod('fetchAggregateQualityMetrics') },\n      },\n      resolve: (obj, args, ctx) => {\n        const fetchAggregateQualityMetrics =\n          datasetsConfig[args.dataset].fetchAggregateQualityMetrics\n        return fetchAggregateQualityMetrics(ctx)\n      },\n    },\n*/    \n    gene: {\n      description: 'Look up variant data by gene name. Example: ACTA1.',\n      type: geneType,\n      args: {\n        gene_name: { type: GraphQLString },\n        gene_id: { type: GraphQLString },\n        filter: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n        if (args.gene_name) {\n          return lookupGeneByName(ctx.database.gnomad, args.gene_name)\n        }\n        if (args.gene_id) {\n          return lookupGeneByGeneId(ctx.database.gnomad, args.gene_id)\n        }\n        return 'No lookup found'\n      },\n    },\n\n    mito_gene: {\n      description: 'Look up variant data by mitochondrial gene name. Example: MT-CO1.',\n      type: mitoGeneType,\n      args: {\n        gene_name: { type: GraphQLString },\n        gene_id: { type: GraphQLString },\n        filter: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n        if (args.gene_name) {\n          return lookupGeneByName(ctx.database.gnomad, args.gene_name)\n        }\n        if (args.gene_id) {\n          return lookupGeneByGeneId(ctx.database.gnomad, args.gene_id)\n        }\n        return 'No lookup found'\n      },\n    },\n\n\n    transcript: {\n      description: 'Look up variant data by transcript ID. Example: ENST00000407236.',\n      type: transcriptType,\n      args: {\n        transcript_id: { type: new GraphQLNonNull(GraphQLString) },\n      },\n      resolve: (obj, args, ctx) => {\n        return lookupTranscriptsByTranscriptId(ctx.database.gnomad, args.transcript_id)\n      },\n    },\n    /*\n    multiNucleotideVariant: {\n      type: MultiNucleotideVariantDetailsType,\n      args: {\n        variantId: { type: new GraphQLNonNull(GraphQLString) },\n      },\n      resolve: (obj, args, ctx) => fetchGnomadMNVDetails(ctx, args.variantId),\n    },\n    */\n\n    region: {\n      description: 'Look up data by start/stop. Example: (start: 55505222, stop: 55505300, chrom: 1).',\n      type: regionType,\n      args: {\n        start: { type: new GraphQLNonNull(GraphQLInt) },\n        stop: { type: new GraphQLNonNull(GraphQLInt) },\n        chrom: { type: new GraphQLNonNull(GraphQLString) },\n      },\n      resolve: (obj, args) => ({\n        start: args.start,\n        stop: args.stop,\n        chrom: args.chrom,\n        xstart: getXpos(args.chrom, args.start),\n        xstop: getXpos(args.chrom, args.stop),\n        regionSize: args.stop - args.start,\n      }),\n    },\n\n    searchResults: {\n      type: new GraphQLList(SearchResultType),\n      args: {\n        query: { type: new GraphQLNonNull(GraphQLString) },\n      },\n      resolve: (obj, args, ctx) => resolveSearchResults(ctx, args.query),\n    },\n\n    \n    structural_variant: {\n      type: GnomadStructuralVariantDetailsType,\n      args: {\n        variantId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => fetchGnomadStructuralVariantDetails(ctx, args.variantId),\n    },\n    \n    \n    variant: {\n      description: 'Look up a single variant or rsid. Example: 1-55516888-G-GA.',\n      type: VariantInterface,\n      args: {\n        // dataset: { type: datasetArgumentTypeForMethod('fetchVariantDetails') },\n        variantId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n        //const { dataset, variantId } = args\n        //const fetchVariantDetails = datasetsConfig[dataset].fetchVariantDetails\n        return fetchVariantDetails(ctx, args.variantId)\n      },\n    },\n\n    mito_variant: {\n      description: 'Look up a single variant or rsid. Example: 1-55516888-G-GA.',\n      type: MitoVariantInterface,\n      args: {\n        // dataset: { type: datasetArgumentTypeForMethod('fetchVariantDetails') },\n        variantId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n        //const { dataset, variantId } = args\n        //const fetchVariantDetails = datasetsConfig[dataset].fetchVariantDetails\n        return fetchMitoVariantDetails(ctx, args.variantId)\n      },\n    },\n\n\n    \n  }),\n})\n\nconst Schema = new GraphQLSchema({\n  query: rootType,\n  types: [VariantDetailsType, MitoVariantDetailsType],\n  //types: datasetSpecificTypes,\n})\n\nexport default Schema\n","/* eslint-disable camelcase */\n/* eslint-disable quote-props */\n\nimport {\n  GraphQLObjectType,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLList,\n} from 'graphql'\n\nconst exonType = new GraphQLObjectType({\n  name: 'Exon',\n  fields: () => ({\n    _id: { type: GraphQLString },\n    start: { type: GraphQLInt },\n    transcript_id: { type: GraphQLString },\n    feature_type: { type: GraphQLString },\n    strand: { type: GraphQLString },\n    stop: { type: GraphQLInt },\n    chrom: { type: GraphQLString },\n    gene_id: { type: GraphQLString },\n  }),\n})\n\nexport default exonType\n\n\nexport const lookupExonsByTranscriptId = (db, transcript_id) =>\n  db.collection('exons').find({ transcript_id }).toArray()\n\nexport const lookupExonsByStartStop = (db, start, stop) =>\n  db.collection('exons').find({ start: { '$gte': Number(start), '$lte': Number(stop) } }).toArray()\n\nexport const lookupExonsByGeneId = (db, gene_id) =>\n  db.collection('exons').find({ gene_id }).toArray()\n","/* eslint-disable camelcase */\n\nimport {\n  GraphQLObjectType,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLList,\n  GraphQLFloat,\n} from 'graphql'\n\nimport { withCache } from '../../utilities/redis'\n\n/*\nimport { datasetArgumentTypeForMethod } from '../datasets/datasetArgumentTypes'\nimport datasetsConfig from '../datasets/datasetsConfig'\nimport fetchGnomadStructuralVariantsByGene from '../datasets/gnomad_sv_r2/fetchGnomadStructuralVariantsByGene'\n*/\n\nimport fetchGnomadStructuralVariantsByGene from '../datasets/fetchGnomadStructuralVariantsByGene'\nimport { StructuralVariantSummaryType } from './structuralVariant'\n\nimport {\n  ClinvarVariantType,\n  fetchClinvarVariantsInGene,\n  fetchClinvarVariantsInTranscript,\n} from '../datasets/clinvar'\n// import { UserVisibleError } from '../errors'\n\n\nimport transcriptType, {\n  CompositeTranscriptType,\n  fetchCompositeTranscriptByGene,\n  lookupTranscriptsByTranscriptId,\n  lookupAllTranscriptsByGeneId,\n} from './transcript'\n\nimport exonType, { lookupExonsByGeneId } from './exon'\n\n/*\nimport constraintType, { lookUpConstraintByTranscriptId } from './constraint'\n\nimport { PextRegionType, fetchPextRegionsByGene } from './pext'\nimport {\n  RegionalMissenseConstraintRegionType,\n  fetchExacRegionalMissenseConstraintRegions,\n} from './regionalConstraint'\n\n*/\n\nimport { VariantSummaryType } from './variant'\n\nimport fetchVariantsByGene from '../datasets/fetchVariantsByGene'\n\nconst geneType = new GraphQLObjectType({\n  name: 'Gene',\n  fields: () => ({\n    _id: { type: GraphQLString },\n    omim_description: { type: GraphQLString },\n    gene_id: { type: GraphQLString },\n    omim_accession: { type: GraphQLString },\n    chrom: { type: GraphQLString },\n    strand: { type: GraphQLString },\n    full_gene_name: { type: GraphQLString },\n    gene_name_upper: { type: GraphQLString },\n    other_names: { type: new GraphQLList(GraphQLString) },\n    canonical_transcript: { type: GraphQLString },\n    start: { type: GraphQLInt },\n    stop: { type: GraphQLInt },\n    xstop: { type: GraphQLFloat },\n    xstart: { type: GraphQLFloat },\n    gene_name: { type: GraphQLString },\n    composite_transcript: {\n      type: CompositeTranscriptType,\n      resolve: (obj, args, ctx) => fetchCompositeTranscriptByGene(ctx, obj),\n    },\n    \n    clinvar_variants: {\n      type: new GraphQLList(ClinvarVariantType),\n      args: {\n        transcriptId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n        return args.transcriptId\n          ? fetchClinvarVariantsInTranscript(args.transcriptId, ctx)\n          : fetchClinvarVariantsInGene(obj.gene_id, ctx)\n      },\n    },\n    /*\n    pext: {\n      type: new GraphQLList(PextRegionType),\n      resolve: (obj, args, ctx) => fetchPextRegionsByGene(ctx, obj.gene_id),\n    },*/\n    transcript: {\n      type: transcriptType,\n      resolve: (obj, args, ctx) =>\n        lookupTranscriptsByTranscriptId(ctx.database.gnomad, obj.canonical_transcript, obj.gene_name),\n    },\n    transcripts: {\n      type: new GraphQLList(transcriptType),\n      resolve: (obj, args, ctx) =>\n        lookupAllTranscriptsByGeneId(ctx.database.gnomad, obj.gene_id),\n    },\n    exons: {\n      type: new GraphQLList(exonType),\n      resolve: (obj, args, ctx) => lookupExonsByGeneId(ctx.database.gnomad, obj.gene_id),\n    },\n    /*\n    exacv1_constraint: {\n      type: constraintType,\n      resolve: (obj, args, ctx) =>\n        lookUpConstraintByTranscriptId(ctx.database.gnomad, obj.canonical_transcript),\n    },\n    exac_regional_missense_constraint_regions: {\n      type: new GraphQLList(RegionalMissenseConstraintRegionType),\n      resolve: (obj, args, ctx) => fetchExacRegionalMissenseConstraintRegions(ctx, obj.gene_name),\n    },\n    */\n    structural_variants: {\n      type: new GraphQLList(StructuralVariantSummaryType),\n      resolve: async (obj, args, ctx) => fetchGnomadStructuralVariantsByGene(ctx, obj),\n    },\n    \n    variants: {\n      type: new GraphQLList(VariantSummaryType),\n      args: {\n        //dataset: { type: datasetArgumentTypeForMethod('fetchVariantsByGene') },\n        transcriptId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n\n        /*\n        if (args.transcriptId) {\n          const fetchVariantsByTranscript = datasetsConfig[args.dataset].fetchVariantsByTranscript\n          return fetchVariantsByTranscript(ctx, args.transcriptId, obj)\n        }\n        */\n\n        console.log(obj.gene_id)\n        console.log(obj.chrom)\n        //const fetchVariantsByGene = datasetsConfig[args.dataset].fetchVariantsByGene\n\n        \n        return withCache(ctx, `gene_cache:${obj.gene_id}`, async () => {\n          return fetchVariantsByGene(ctx, obj.gene_id, obj.canonical_transcript)\n        })\n        \n\n        //return fetchVariantsByGene(ctx, obj.gene_id, obj.canonical_transcript)\n      },\n    },\n  }),\n})\n\nexport default geneType\n\nexport const lookupGeneByGeneId = (db, gene_id) =>\n  db.collection('genes').findOne({ gene_id })\n\nexport const lookupGeneByName = async (db, geneName) => {\n  const gene = await db.collection('genes').findOne({ gene_name_upper: geneName.toUpperCase() })\n  if (!gene) {\n    throw new UserVisibleError('Gene not found')\n  }\n  return gene\n}\n\nexport const fetchGenesByInterval = (ctx, { xstart, xstop }) =>\n  ctx.database.gnomad\n    .collection('genes')\n    .find({ $and: [{ xstart: { $lte: xstop } }, { xstop: { $gte: xstart } }] })\n    .toArray()\n","import { GraphQLFloat, GraphQLObjectType, GraphQLString } from 'graphql'\n\nexport const GtexTissueExpressionsType = new GraphQLObjectType({\n  name: 'GtexTissueExpressions',\n  fields: {\n    adiposeSubcutaneous: { type: GraphQLFloat },\n    adiposeVisceralOmentum: { type: GraphQLFloat },\n    adrenalGland: { type: GraphQLFloat },\n    arteryAorta: { type: GraphQLFloat },\n    arteryCoronary: { type: GraphQLFloat },\n    arteryTibial: { type: GraphQLFloat },\n    bladder: { type: GraphQLFloat },\n    brainAmygdala: { type: GraphQLFloat },\n    brainAnteriorcingulatecortexBa24: { type: GraphQLFloat },\n    brainCaudateBasalganglia: { type: GraphQLFloat },\n    brainCerebellarhemisphere: { type: GraphQLFloat },\n    brainCerebellum: { type: GraphQLFloat },\n    brainCortex: { type: GraphQLFloat },\n    brainFrontalcortexBa9: { type: GraphQLFloat },\n    brainHippocampus: { type: GraphQLFloat },\n    brainHypothalamus: { type: GraphQLFloat },\n    brainNucleusaccumbensBasalganglia: { type: GraphQLFloat },\n    brainPutamenBasalganglia: { type: GraphQLFloat },\n    brainSpinalcordCervicalc1: { type: GraphQLFloat },\n    brainSubstantianigra: { type: GraphQLFloat },\n    breastMammarytissue: { type: GraphQLFloat },\n    cellsEbvTransformedlymphocytes: { type: GraphQLFloat },\n    cellsTransformedfibroblasts: { type: GraphQLFloat },\n    cervixEctocervix: { type: GraphQLFloat },\n    cervixEndocervix: { type: GraphQLFloat },\n    colonSigmoid: { type: GraphQLFloat },\n    colonTransverse: { type: GraphQLFloat },\n    esophagusGastroesophagealjunction: { type: GraphQLFloat },\n    esophagusMucosa: { type: GraphQLFloat },\n    esophagusMuscularis: { type: GraphQLFloat },\n    fallopianTube: { type: GraphQLFloat },\n    heartAtrialappendage: { type: GraphQLFloat },\n    heartLeftventricle: { type: GraphQLFloat },\n    kidneyCortex: { type: GraphQLFloat },\n    liver: { type: GraphQLFloat },\n    lung: { type: GraphQLFloat },\n    minorSalivaryGland: { type: GraphQLFloat },\n    muscleSkeletal: { type: GraphQLFloat },\n    nerveTibial: { type: GraphQLFloat },\n    ovary: { type: GraphQLFloat },\n    pancreas: { type: GraphQLFloat },\n    pituitary: { type: GraphQLFloat },\n    prostate: { type: GraphQLFloat },\n    skinNotsunexposedSuprapubic: { type: GraphQLFloat },\n    skinSunexposedLowerleg: { type: GraphQLFloat },\n    smallIntestineTerminalileum: { type: GraphQLFloat },\n    spleen: { type: GraphQLFloat },\n    stomach: { type: GraphQLFloat },\n    testis: { type: GraphQLFloat },\n    thyroid: { type: GraphQLFloat },\n    uterus: { type: GraphQLFloat },\n    vagina: { type: GraphQLFloat },\n    wholeBlood: { type: GraphQLFloat },\n    transcriptId: { type: GraphQLString },\n    geneId: { type: GraphQLString },\n  },\n})\n\nexport const fetchGtexTissueExpressionsByTranscript = async (ctx, transcriptId) => {\n\n  transcriptId = transcriptId.concat(\"*\")\n  // query: \"ENST00000342665*\"\n\n\n  const response = await ctx.database.elastic.search({\n    index: 'gtex_tissue_tpms_by_transcript',\n    //type: 'tissue_tpms',\n    size: 1,\n    body: {\n        query : {\n            query_string: {\n                default_field: 'transcriptId',\n                query: transcriptId\n            }\n        }\n    },\n  })\n\n  //console.log(transcriptId)\n/*\n  const response = await ctx.database.elastic.search({\n    index: 'gtex_tissue_tpms_by_transcript',\n    type: 'tissue_tpms',\n    size: 1,\n    body: {\n      query: {\n        bool: {\n          filter: {\n            term: { transcriptId },\n          },\n        },\n      },\n    },\n  })\n*/\n\n  const doc = response.hits.hits[0]\n  //console.log(doc)\n\n  return doc ? doc._source : null // eslint-disable-line no-underscore-dangle\n}\n","/* eslint-disable camelcase */\n\nimport {\n  GraphQLObjectType,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLList,\n  GraphQLFloat,\n} from 'graphql'\n\n\n/*\nimport { datasetArgumentTypeForMethod } from '../datasets/datasetArgumentTypes'\nimport datasetsConfig from '../datasets/datasetsConfig'\nimport fetchGnomadStructuralVariantsByGene from '../datasets/gnomad_sv_r2/fetchGnomadStructuralVariantsByGene'\n*/\n\nimport fetchGnomadStructuralVariantsByGene from '../datasets/fetchGnomadStructuralVariantsByGene'\nimport { StructuralVariantSummaryType } from './structuralVariant'\n\nimport {\n  ClinvarVariantType,\n  fetchClinvarVariantsInGene,\n  fetchClinvarVariantsInTranscript,\n} from '../datasets/clinvar'\n// import { UserVisibleError } from '../errors'\n\n\nimport transcriptType, {\n  CompositeTranscriptType,\n  fetchCompositeTranscriptByGene,\n  lookupTranscriptsByTranscriptId,\n  lookupAllTranscriptsByGeneId,\n} from './transcript'\n\nimport exonType, { lookupExonsByGeneId } from './exon'\n\n/*\nimport constraintType, { lookUpConstraintByTranscriptId } from './constraint'\n\nimport { PextRegionType, fetchPextRegionsByGene } from './pext'\nimport {\n  RegionalMissenseConstraintRegionType,\n  fetchExacRegionalMissenseConstraintRegions,\n} from './regionalConstraint'\n\n*/\n\nimport { MitoVariantSummaryType } from './mito_variant'\n\nimport fetchMitoVariantsByGene from '../datasets/fetchMitoVariantsByGene'\n\nconst mitoGeneType = new GraphQLObjectType({\n  name: 'MitoGene',\n  fields: () => ({\n    _id: { type: GraphQLString },\n    omim_description: { type: GraphQLString },\n    gene_id: { type: GraphQLString },\n    omim_accession: { type: GraphQLString },\n    chrom: { type: GraphQLString },\n    strand: { type: GraphQLString },\n    full_gene_name: { type: GraphQLString },\n    gene_name_upper: { type: GraphQLString },\n    other_names: { type: new GraphQLList(GraphQLString) },\n    canonical_transcript: { type: GraphQLString },\n    start: { type: GraphQLInt },\n    stop: { type: GraphQLInt },\n    xstop: { type: GraphQLFloat },\n    xstart: { type: GraphQLFloat },\n    gene_name: { type: GraphQLString },\n    composite_transcript: {\n      type: CompositeTranscriptType,\n      resolve: (obj, args, ctx) => fetchCompositeTranscriptByGene(ctx, obj),\n    },\n    \n    clinvar_variants: {\n      type: new GraphQLList(ClinvarVariantType),\n      args: {\n        transcriptId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n        return args.transcriptId\n          ? fetchClinvarVariantsInTranscript(args.transcriptId, ctx)\n          : fetchClinvarVariantsInGene(obj.gene_id, ctx)\n      },\n    },\n    /*\n    pext: {\n      type: new GraphQLList(PextRegionType),\n      resolve: (obj, args, ctx) => fetchPextRegionsByGene(ctx, obj.gene_id),\n    },*/\n    transcript: {\n      type: transcriptType,\n      resolve: (obj, args, ctx) =>\n        lookupTranscriptsByTranscriptId(ctx.database.gnomad, obj.canonical_transcript, obj.gene_name),\n    },\n    transcripts: {\n      type: new GraphQLList(transcriptType),\n      resolve: (obj, args, ctx) =>\n        lookupAllTranscriptsByGeneId(ctx.database.gnomad, obj.gene_id),\n    },\n    exons: {\n      type: new GraphQLList(exonType),\n      resolve: (obj, args, ctx) => lookupExonsByGeneId(ctx.database.gnomad, obj.gene_id),\n    },\n    /*\n    exacv1_constraint: {\n      type: constraintType,\n      resolve: (obj, args, ctx) =>\n        lookUpConstraintByTranscriptId(ctx.database.gnomad, obj.canonical_transcript),\n    },\n    exac_regional_missense_constraint_regions: {\n      type: new GraphQLList(RegionalMissenseConstraintRegionType),\n      resolve: (obj, args, ctx) => fetchExacRegionalMissenseConstraintRegions(ctx, obj.gene_name),\n    },\n    */\n\n    /*\n    structural_variants: {\n      type: new GraphQLList(StructuralVariantSummaryType),\n      resolve: async (obj, args, ctx) => fetchGnomadStructuralVariantsByGene(ctx, obj),\n    },\n    */\n\n    variants: {\n      type: new GraphQLList(MitoVariantSummaryType),\n      args: {\n        //dataset: { type: datasetArgumentTypeForMethod('fetchVariantsByGene') },\n        transcriptId: { type: GraphQLString },\n      },\n      resolve: (obj, args, ctx) => {\n\n        /*\n        if (args.transcriptId) {\n          const fetchVariantsByTranscript = datasetsConfig[args.dataset].fetchVariantsByTranscript\n          return fetchVariantsByTranscript(ctx, args.transcriptId, obj)\n        }\n        */\n\n        console.log(obj.gene_id)\n        console.log(obj.chrom)\n        //const fetchVariantsByGene = datasetsConfig[args.dataset].fetchVariantsByGene\n        return fetchMitoVariantsByGene(ctx, obj.gene_id, obj.canonical_transcript)\n      },\n    },\n  }),\n})\n\nexport default mitoGeneType\n\n/*\nexport const lookupGeneByGeneId = (db, gene_id) =>\n  db.collection('genes').findOne({ gene_id })\n\nexport const lookupGeneByName = async (db, geneName) => {\n  const gene = await db.collection('genes').findOne({ gene_name_upper: geneName.toUpperCase() })\n  if (!gene) {\n    throw new UserVisibleError('Gene not found')\n  }\n  return gene\n}\n\nexport const fetchGenesByInterval = (ctx, { xstart, xstop }) =>\n  ctx.database.gnomad\n    .collection('genes')\n    .find({ $and: [{ xstart: { $lte: xstop } }, { xstop: { $gte: xstart } }] })\n    .toArray()\n*/\n\n\n","import {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\nexport const MitoVariantInterface = new GraphQLInterfaceType({\n  name: 'MitoVariant',\n  fields: {\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n  },\n})\n\nconst MitoVariantSequencingDataType = new GraphQLObjectType({\n  name: 'MitoVariantSequencingData',\n  fields: {\n    ac: { type: GraphQLInt },\n    ac_het: { type: GraphQLInt },\n    ac_hom: { type: GraphQLInt },\n    an: { type: GraphQLInt },\n    af: { type: GraphQLFloat },\n    max_heteroplasmy : { type: GraphQLFloat },\n    \n    //ac_proband: { type: GraphQLInt },\n    //an_proband: { type: GraphQLInt },\n    //af_proband: { type: GraphQLFloat },\n    \n    filters: { type: new GraphQLList(GraphQLString) },\n    /*\n    populations: {\n      type: new GraphQLList(\n        new GraphQLObjectType({\n          name: 'VariantPopulations',\n          fields: {\n            id: { type: new GraphQLNonNull(GraphQLString) },\n            ac: { type: new GraphQLNonNull(GraphQLInt) },\n            an: { type: new GraphQLNonNull(GraphQLInt) },\n            //ac_hemi: { type: new GraphQLNonNull(GraphQLInt) },\n            ac_hom: { type: new GraphQLNonNull(GraphQLInt) },\n          },\n        })\n      ),\n    },\n    */\n\n  },\n})\n\n\nexport const MitoVariantSummaryType = new GraphQLObjectType({\n  name: 'MitoVariantSummary',\n  fields: {\n    // Variant ID fields\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n    // Other fields\n    consequence: { type: GraphQLString },\n    consequence_in_canonical_transcript: { type: GraphQLBoolean },\n    flags: { type: new GraphQLList(GraphQLString) },\n    hgvs: { type: GraphQLString },\n    hgvsc: { type: GraphQLString },\n    hgvsp: { type: GraphQLString },\n    //rsid: { type: GraphQLString },\n\n    //ac_gnomad: { type: GraphQLInt },\n    //an_gnomad: { type: GraphQLInt },    \n\n    // will keep with this name for future\n    //spark_exome: { type: VariantSequencingDataType },\n    spark_genome: { type: MitoVariantSequencingDataType },\n    ssc_genome: { type: MitoVariantSequencingDataType },\n    //ssc_genome: { type: VariantSequencingDataType },\n    // genome: { type: VariantSequencingDataType },\n  },\n})\n","import { GraphQLList, GraphQLInt, GraphQLObjectType, GraphQLString } from 'graphql'\n\n//import { datasetArgumentTypeForMethod, AnyDatasetArgumentType } from '../datasets/datasetArgumentTypes'\n//import datasetsConfig from '../datasets/datasetsConfig'\n//import coverageType, { fetchCoverageByRegion } from './coverage'\n\nimport { UserVisibleError } from '../errors'\nimport geneType, { fetchGenesByInterval } from './gene'\nimport { VariantSummaryType } from './variant'\nimport countVariantsInRegion from '../datasets/countVariantsInRegion'\nimport fetchVariantsByRegion from '../datasets/fetchVariantsByRegion'\n\nimport { StructuralVariantSummaryType } from './structuralVariant'\nimport fetchGnomadStructuralVariantsByRegion from '../datasets/fetchGnomadStructuralVariantsByRegion'\n\n\n// Individual variants will only be returned if a region has fewer than this many variants\nconst FETCH_INDIVIDUAL_VARIANTS_LIMIT = 30000\n\nconst regionType = new GraphQLObjectType({\n  name: 'Region',\n  fields: () => ({\n    start: { type: GraphQLInt },\n    stop: { type: GraphQLInt },\n    xstart: { type: GraphQLInt },\n    xstop: { type: GraphQLInt },\n    chrom: { type: GraphQLString },\n    regionSize: { type: GraphQLInt },\n\n    genes: {\n      type: new GraphQLList(geneType),\n      resolve: (obj, args, ctx) =>\n        fetchGenesByInterval(ctx, {\n          xstart: obj.xstart,\n          xstop: obj.xstop,\n        }),\n    },\n    \n    /*\n    exome_coverage: {\n      type: new GraphQLList(coverageType),\n      args: {\n        dataset: { type: AnyDatasetArgumentType },\n      },\n      resolve: (obj, args, ctx) => {\n        const { index, type } = datasetsConfig[args.dataset].exomeCoverageIndex\n        if (!index) {\n          return []\n        }\n        return fetchCoverageByRegion(ctx, {\n          index,\n          type,\n          region: obj,\n        })\n      },\n    },\n    genome_coverage: {\n      type: new GraphQLList(coverageType),\n      args: {\n        dataset: { type: AnyDatasetArgumentType },\n      },\n      resolve: (obj, args, ctx) => {\n        const { index, type } = datasetsConfig[args.dataset].genomeCoverageIndex\n        if (!index) {\n          return []\n        }\n        return fetchCoverageByRegion(ctx, {\n          index,\n          type,\n          region: obj,\n        })\n      },\n    },\n    */\n    structural_variants: {\n      type: new GraphQLList(StructuralVariantSummaryType),\n      resolve: async (obj, args, ctx) => fetchGnomadStructuralVariantsByRegion(ctx, obj),\n    },\n    \n    \n    \n    variants: {\n      type: new GraphQLList(VariantSummaryType),\n      /*\n      args: {\n        dataset: { type: datasetArgumentTypeForMethod('fetchVariantsByRegion') },\n      },\n      */\n      resolve: async (obj, args, ctx) => {\n        //const countVariantsInRegion = datasetsConfig[args.dataset].countVariantsInRegion\n        //const fetchVariantsByRegion = datasetsConfig[args.dataset].fetchVariantsByRegion\n\n        const numVariantsInRegion = await countVariantsInRegion(ctx, obj)\n\n        if (numVariantsInRegion > FETCH_INDIVIDUAL_VARIANTS_LIMIT) {\n          throw UserVisibleError(\n            `Individual variants can only be returned for regions with fewer than ${FETCH_INDIVIDUAL_VARIANTS_LIMIT} variants`\n          )\n        }\n        return fetchVariantsByRegion(ctx, obj)\n      },\n    },\n    \n  }),\n})\n\nexport default regionType\n","import { GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql'\nimport { escapeRegExp } from 'lodash'\n\nexport const SearchResultType = new GraphQLObjectType({\n  name: 'SearchResult',\n  fields: {\n    label: { type: new GraphQLNonNull(GraphQLString) },\n    url: { type: new GraphQLNonNull(GraphQLString) },\n  },\n})\n\nconst REGION_ID_REGEX = /^(chr)?(\\d+|x|y|m|mt)[-:]([0-9]+)([-:]([0-9]+)?)?$/i\n\nexport const isRegionId = str => {\n  const match = REGION_ID_REGEX.exec(str)\n  if (!match) {\n    return false\n  }\n\n  const chrom = match[2].toLowerCase()\n  const chromNumber = Number(chrom)\n  if (!Number.isNaN(chromNumber) && (chromNumber < 1 || chromNumber > 22)) {\n    return false\n  }\n\n  const start = match[3]\n  const end = match[5]\n\n  if (end && end < start) {\n    return false\n  }\n\n  return true\n}\n\nexport const normalizeRegionId = regionId => {\n  const parts = regionId.split(/[-:]/)\n  const chrom = parts[0].toUpperCase().replace(/^CHR/, '')\n  let start = Number(parts[1])\n  let end\n\n  if (parts[2]) {\n    end = Number(parts[2])\n  } else {\n    end = start + 20\n    start = Math.max(start - 20, 0)\n  }\n\n  return `${chrom}-${start}-${end}`\n}\n\nconst VARIANT_ID_REGEX = /^(chr)?(\\d+|x|y|m|mt)[-:]([0-9]+)[-:]([acgt]+)[-:]([acgt]+)$/i\n\nexport const isVariantId = str => {\n  const match = VARIANT_ID_REGEX.exec(str)\n  if (!match) {\n    return false\n  }\n\n  const chrom = match[2].toLowerCase()\n  const chromNumber = Number(chrom)\n  if (!Number.isNaN(chromNumber) && (chromNumber < 1 || chromNumber > 22)) {\n    return false\n  }\n\n  return true\n}\n\nexport const normalizeVariantId = variantId =>\n  variantId\n    .toUpperCase()\n    .replace(/:/g, '-')\n    .replace(/^CHR/, '')\n\nexport const resolveSearchResults = async (ctx, query) => {\n  \n  //console.log(query)\n  if (isVariantId(query)) {\n    const variantId = normalizeVariantId(query)\n    return [\n      {\n        label: variantId,\n        url: `/variant/${variantId}`,\n      },\n    ]\n  }\n\n  if (isRegionId(query)) {\n    const regionId = normalizeRegionId(query)\n    return [\n      {\n        label: regionId,\n        url: `/region/${regionId}`,\n      },\n    ]\n  }\n\n  const startsWithQuery = { $regex: `^${escapeRegExp(query).toUpperCase()}` }\n\n  if (/^ensg[0-9]/i.test(query)) {\n    const matchingGenes = await ctx.database.gnomad\n      .collection('genes')\n      .find({ gene_id: startsWithQuery })\n      .limit(5)\n      .toArray()\n\n    return matchingGenes.map(gene => ({\n      label: `${gene.gene_id} (${gene.gene_name_upper})`,\n      url: `/gene/${gene.gene_id}`,\n    }))\n  }\n\n  if (/^enst[0-9]/i.test(query)) {\n    const matchingTranscripts = await ctx.database.gnomad\n      .collection('transcripts')\n      .find({ transcript_id: startsWithQuery })\n      .limit(5)\n      .toArray()\n\n    return matchingTranscripts.map(transcript => ({\n      label: `${transcript.transcript_id}`,\n      url: `/gene/${transcript.gene_id}/transcript/${transcript.transcript_id}`,\n    }))\n  }\n\n  const matchingGenes = await ctx.database.gnomad\n    .collection('genes')\n    .find({\n      $or: [{ gene_name_upper: startsWithQuery }, { other_names: startsWithQuery }],\n    })\n    .limit(5)\n    .toArray()\n\n  const geneNameCounts = {}\n  matchingGenes.forEach(gene => {\n    if (geneNameCounts[gene.gene_name_upper] === undefined) {\n      geneNameCounts[gene.gene_name_upper] = 0\n    }\n    geneNameCounts[gene.gene_name_upper] += 1\n  })\n\n  const geneResults = matchingGenes.map(gene => ({\n    label:\n      geneNameCounts[gene.gene_name_upper] > 1\n        ? `${gene.gene_name_upper} (${gene.gene_id})`\n        : gene.gene_name_upper,\n    url: `/gene/${gene.gene_id}`,\n  }))\n\n  if (geneResults.length < 5 && /^rs[0-9]/i.test(query)) {\n    const response = await ctx.database.elastic.search({\n      index: 'gnomad_exomes_2_1_1,gnomad_genomes_2_1_1',\n      type: 'variant',\n      _source: ['rsid', 'variant_id'],\n      body: {\n        query: {\n          term: { rsid: query.toLowerCase() },\n        },\n      },\n      size: 5 - geneResults.length,\n    })\n\n    const variantResults = response.hits.hits.map(doc => ({\n      label: `${doc._source.variant_id} (${doc._source.rsid})`, // eslint-disable-line no-underscore-dangle\n      url: `/variant/${doc._source.variant_id}`, // eslint-disable-line no-underscore-dangle\n    }))\n\n    return geneResults.concat(variantResults)\n  }\n\n  return geneResults\n}\n","import {\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\nexport const StructuralVariantSummaryType = new GraphQLObjectType({\n  name: 'StructuralVariantSummary',\n  fields: {\n    ac: { type: GraphQLInt },\n    ac_hom: { type: GraphQLInt },\n    an: { type: GraphQLInt },\n    af: { type: GraphQLFloat },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    end_chrom: { type: new GraphQLNonNull(GraphQLString) },\n    end_pos: { type: new GraphQLNonNull(GraphQLInt) },\n    consequence: { type: GraphQLString },\n    filters: { type: new GraphQLList(GraphQLString) },\n    length: { type: GraphQLInt },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    type: { type: new GraphQLNonNull(GraphQLString) },\n    variant_id: { type: new GraphQLNonNull(GraphQLString) },\n  },\n})\n","/* eslint-disable camelcase */\n\nimport {\n  GraphQLObjectType,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLList,\n  GraphQLFloat,\n} from 'graphql'\n\n/*\nimport { withCache } from '../../utilities/redis'\n*/\nimport { mergeOverlappingRegions } from '../../utilities/region'\n\n\n/*\nimport { AnyDatasetArgumentType } from '../datasets/datasetArgumentTypes'\nimport datasetsConfig from '../datasets/datasetsConfig'\nimport coverageType, { fetchCoverageByTranscript } from './coverage'\n*/\nimport exonType, { lookupExonsByGeneId, lookupExonsByTranscriptId } from './exon'\nimport { GtexTissueExpressionsType, fetchGtexTissueExpressionsByTranscript } from './gtex'\n\nimport fetchGnomadConstraintByTranscript from '../datasets/fetchGnomadConstraintByTranscript'\nimport GnomadConstraintType from '../datasets/GnomadConstraintType'\n\n\nconst transcriptType = new GraphQLObjectType({\n  name: 'Transcript',\n  fields: () => ({\n    _id: { type: GraphQLString },\n    start: { type: GraphQLInt },\n    transcript_id: { type: GraphQLString },\n    strand: { type: GraphQLString },\n    stop: { type: GraphQLInt },\n    xstart: { type: GraphQLFloat },\n    chrom: { type: GraphQLString },\n    gene_id: { type: GraphQLString },\n    gene_name: { type: GraphQLString },\n    xstop: { type: GraphQLFloat },\n    exons: {\n      type: new GraphQLList(exonType),\n      resolve: (obj, args, ctx) =>\n       lookupExonsByTranscriptId(ctx.database.gnomad, obj.transcript_id),\n    },\n\n/*\n    exome_coverage: {\n      type: new GraphQLList(coverageType),\n      args: {\n        dataset: { type: AnyDatasetArgumentType },\n      },\n      resolve: async (obj, args, ctx) => {\n        const { index, type } = datasetsConfig[args.dataset].exomeCoverageIndex\n        if (!index) {\n          return []\n        }\n        return withCache(ctx, `coverage:transcript:${index}:${obj.transcript_id}`, async () => {\n          const exons = await lookupExonsByTranscriptId(ctx.database.gnomad, obj.transcript_id)\n          return fetchCoverageByTranscript(ctx, {\n            index,\n            type,\n            chrom: obj.chrom,\n            exons,\n          })\n        })\n      },\n    },\n    genome_coverage: {\n      type: new GraphQLList(coverageType),\n      args: {\n        dataset: { type: AnyDatasetArgumentType },\n      },\n      resolve: async (obj, args, ctx) => {\n        const { index, type } = datasetsConfig[args.dataset].genomeCoverageIndex\n        if (!index) {\n          return []\n        }\n        return withCache(ctx, `coverage:transcript:${index}:${obj.transcript_id}`, async () => {\n          const exons = await lookupExonsByTranscriptId(ctx.database.gnomad, obj.transcript_id)\n          return fetchCoverageByTranscript(ctx, {\n            index,\n            type,\n            chrom: obj.chrom,\n            exons,\n          })\n        })\n      },\n    },*/\n    \n    gnomad_constraint: {\n      type: GnomadConstraintType,\n      resolve: (obj, args, ctx) => fetchGnomadConstraintByTranscript(ctx, obj.transcript_id),\n    },\n    \n    gtex_tissue_tpms_by_transcript: {\n      type: GtexTissueExpressionsType,\n      resolve: (obj, args, ctx) => fetchGtexTissueExpressionsByTranscript(ctx, obj.transcript_id),\n    },\n  }),\n})\n\nexport default transcriptType\n\nexport const lookupTranscriptsByTranscriptId = (db, transcript_id, gene_name) =>\n  new Promise((resolve) => {\n    db.collection('transcripts').findOne({ transcript_id })\n      .then(data => resolve({ ...data, gene_name }))\n  })\n\nexport const lookupAllTranscriptsByGeneId = (db, gene_id) =>\n  db.collection('transcripts').find({ gene_id }).toArray()\n\n\nexport const CompositeTranscriptType = new GraphQLObjectType({\n  name: 'CompositeTranscript',\n  fields: {\n    exons: { type: new GraphQLList(exonType) },\n\n/*\n    exome_coverage: {\n      type: new GraphQLList(coverageType),\n      args: {\n        dataset: { type: AnyDatasetArgumentType },\n      },\n      resolve: (obj, args, ctx) => {\n        const { index, type } = datasetsConfig[args.dataset].exomeCoverageIndex\n        if (!index) {\n          return []\n        }\n        return withCache(ctx, `coverage:gene:${index}:${obj.gene_id}`, () =>\n          fetchCoverageByTranscript(ctx, {\n            index,\n            type,\n            chrom: obj.chrom,\n            exons: obj.exons,\n          })\n        )\n      },\n    },\n    genome_coverage: {\n      type: new GraphQLList(coverageType),\n      args: {\n        dataset: { type: AnyDatasetArgumentType },\n      },\n      resolve: (obj, args, ctx) => {\n        const { index, type } = datasetsConfig[args.dataset].genomeCoverageIndex\n        if (!index) {\n          return []\n        }\n        return withCache(ctx, `coverage:gene:${index}:${obj.gene_id}`, () =>\n          fetchCoverageByTranscript(ctx, {\n            index,\n            type,\n            chrom: obj.chrom,\n            exons: obj.exons,\n          })\n        )\n      },\n    },*/\n  },\n})\n\nexport const fetchCompositeTranscriptByGene = async (ctx, gene) => {\n  const allExons = await lookupExonsByGeneId(ctx.database.gnomad, gene.gene_id)\n  const sortedExons = allExons.sort((r1, r2) => r1.start - r2.start)\n\n  const cdsExons = allExons.filter(exon => exon.feature_type === 'CDS')\n  const utrExons = allExons.filter(exon => exon.feature_type === 'UTR')\n\n  const cdsCompositeExons = mergeOverlappingRegions(cdsExons)\n  const utrCompositeExons = mergeOverlappingRegions(utrExons)\n\n  /**\n   * There are 3 feature types in the exons collection: \"CDS\", \"UTR\", and \"exon\".\n   * There are \"exon\" regions that cover the \"CDS\" and \"UTR\" regions and also\n   * some (non-coding) transcripts that contain only \"exon\" regions.\n   * This filters the \"exon\" regions to only those that are in non-coding transcripts.\n   *\n   * This makes the UI for selecting visible regions easier, since it can filter\n   * on \"CDS\" or \"UTR\" feature type without having to also filter out the \"exon\" regions\n   * that duplicate the \"CDS\" and \"UTR\" regions.\n   */\n  const codingTranscripts = new Set(\n    allExons\n      .filter(exon => exon.feature_type === 'CDS' || exon.feature_type === 'UTR')\n      .map(exon => exon.transcript_id)\n  )\n\n  const nonCodingTranscriptExons = sortedExons.filter(\n    exon => !codingTranscripts.has(exon.transcript_id)\n  )\n\n  const nonCodingTranscriptCompositeExons = mergeOverlappingRegions(nonCodingTranscriptExons)\n\n  return {\n    gene_id: gene.gene_id,\n    chrom: gene.chrom,\n    exons: [...cdsCompositeExons, ...utrCompositeExons, ...nonCodingTranscriptCompositeExons],\n  }\n}\n","import {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\n\nexport const VariantInterface = new GraphQLInterfaceType({\n  name: 'Variant',\n  fields: {\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n  },\n})\n\nconst VariantSequencingDataType = new GraphQLObjectType({\n  name: 'VariantSequencingData',\n  fields: {\n    ac: { type: GraphQLInt },\n    //ac_hemi: { type: GraphQLInt },\n    ac_hom: { type: GraphQLInt },\n    an: { type: GraphQLInt },\n    af: { type: GraphQLFloat },\n    ac_proband: { type: GraphQLInt },\n    an_proband: { type: GraphQLInt },\n    af_proband: { type: GraphQLFloat },\n    filters: { type: new GraphQLList(GraphQLString) },\n\n    populations: {\n      type: new GraphQLList(\n        new GraphQLObjectType({\n          name: 'VariantPopulations',\n          fields: {\n            id: { type: new GraphQLNonNull(GraphQLString) },\n            ac: { type: new GraphQLNonNull(GraphQLInt) },\n            an: { type: new GraphQLNonNull(GraphQLInt) },\n            //ac_hemi: { type: new GraphQLNonNull(GraphQLInt) },\n            ac_hom: { type: new GraphQLNonNull(GraphQLInt) },\n          },\n        })\n      ),\n    },\n  },\n})\n\nexport const VariantSummaryType = new GraphQLObjectType({\n  name: 'VariantSummary',\n  fields: {\n    // Variant ID fields\n    alt: { type: new GraphQLNonNull(GraphQLString) },\n    chrom: { type: new GraphQLNonNull(GraphQLString) },\n    pos: { type: new GraphQLNonNull(GraphQLInt) },\n    ref: { type: new GraphQLNonNull(GraphQLString) },\n    variantId: { type: new GraphQLNonNull(GraphQLString) },\n    xpos: { type: new GraphQLNonNull(GraphQLFloat) },\n    // Other fields\n    consequence: { type: GraphQLString },\n    consequence_in_canonical_transcript: { type: GraphQLBoolean },\n    flags: { type: new GraphQLList(GraphQLString) },\n    hgvs: { type: GraphQLString },\n    hgvsc: { type: GraphQLString },\n    hgvsp: { type: GraphQLString },\n    rsid: { type: GraphQLString },\n\n    ac_gnomad: { type: GraphQLInt },\n    an_gnomad: { type: GraphQLInt },    \n\n    // will keep with this name for future\n    bpkd_exome: { type: VariantSequencingDataType },\n    //spark_genome: { type: VariantSequencingDataType },\n    //ssc_genome: { type: VariantSequencingDataType },\n    // genome: { type: VariantSequencingDataType },\n  },\n})\n","/**\n * Search and then scroll to retrieve all pages of search results.\n *\n * @param {elasticsearch.Client} esClient Elasticsearch client\n * @param {Object} searchParams Argument to elasticsearch.Client#search\n * @return {Object[]} Combined list of hits from all responses\n */\nexport async function fetchAllSearchResults(esClient, searchParams) {\n  let allResults = []\n  const responseQueue = []\n\n  const size = searchParams.size || 1000\n  const scroll = searchParams.scroll || '30s'\n  \n  // You can also retrieve hits.total as a number in the rest response by adding rest_total_hits_as_int=true\n  // https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#hits-total-now-object-search-response\n  // Change between Elastic Search 7 and 6\n  const rest_total_hits_as_int=true\n\n  //console.log(searchParams)\n\n  responseQueue.push(\n    await esClient.search({\n      ...searchParams,\n      scroll,\n      size,\n      rest_total_hits_as_int\n    })\n  )\n\n\n  while (responseQueue.length) {\n    const response = responseQueue.shift()\n    allResults = allResults.concat(response.hits.hits)\n\n    //console.log(response)\n\n    //if (allResults.length === response.hits.total) {\n    if (allResults.length === response.hits.total.value) {\n      // eslint-disable-next-line no-await-in-loop\n      await esClient.clearScroll({\n        scrollId: response._scroll_id,\n      })\n      break\n    }\n\n    responseQueue.push(\n      // eslint-disable-next-line no-await-in-loop\n      await esClient.scroll({\n        scroll,\n        scrollId: response._scroll_id,\n      })\n    )\n  }\n  \n\n  return allResults\n}\n","export const withCache = async (ctx, cacheKey, fn) => {\n  const cachedValue = await ctx.database.redis.get(cacheKey)\n  if (cachedValue) {\n    return JSON.parse(cachedValue)\n  }\n\n  const value = await fn()\n\n  await ctx.database.redis.set(cacheKey, JSON.stringify(value))\n\n  return value\n}\n","export const extendRegions = (amount, regions) =>\n  regions.map(({ start, stop, xstart, xstop, ...rest }) => ({\n    ...rest,\n    start: start - amount,\n    stop: stop + amount,\n    xstart: xstart - amount,\n    xstop: xstop + amount,\n  }))\n\n/**\n * Create a minimal representation of a set of regions.\n * xstart and xstop are inclusive.\n *\n * @example\n * // returns { xstart: 0, xstop: 10 }\n * mergeOverlappingRegions([{ xstart: 0, xstop: 7 }, { xstart: 3, xstop: 10 }])\n *\n * @param {Object[]} sortedRegions - Regions ordered by xstart\n * @param {number} sortedRegions[].xstart\n * @param {number} sortedRegions[].xstop\n */\nexport const mergeOverlappingRegions = sortedRegions => {\n  if (sortedRegions.length === 0) {\n    return []\n  }\n\n  const mergedRegions = [{ ...sortedRegions[0] }]\n\n  let previousRegion = mergedRegions[0]\n\n  for (let i = 1; i < sortedRegions.length; i += 1) {\n    const nextRegion = sortedRegions[i]\n\n    if (nextRegion.xstart <= previousRegion.xstop + 1) {\n      if (nextRegion.xstop > previousRegion.xstop) {\n        previousRegion.stop = nextRegion.stop\n        previousRegion.xstop = nextRegion.xstop\n      }\n    } else {\n      previousRegion = { ...nextRegion }\n      mergedRegions.push(previousRegion)\n    }\n  }\n\n  return mergedRegions\n}\n\nexport const totalRegionSize = regions =>\n  regions.reduce((acc, { start, stop }) => acc + stop - start, 0)\n","export const getXpos = (chr, pos) => {\n  const autosomes = Array.from(new Array(22), (x, i) => `chr${i + 1}`)\n  const chromosomes = [...autosomes, 'chrX', 'chrY', 'chrM']\n  const chromosomeCodes = chromosomes.reduce((acc, chrom, i) => {\n    return { ...acc, [chrom]: i + 1 }\n  }, {})\n  const chrStart = chromosomeCodes[`chr${chr}`] * 1e9\n  const xpos = chrStart + Number(pos)\n  return xpos\n}\n","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"elasticsearch\");","module.exports = require(\"express\");","module.exports = require(\"express-graphql\");","module.exports = require(\"graphql\");","module.exports = require(\"graphql-disable-introspection\");","module.exports = require(\"ioredis\");","module.exports = require(\"lodash\");","module.exports = require(\"mongodb\");","module.exports = require(\"node-fetch\");","module.exports = require(\"serve-static\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from 'express'\nimport compression from 'compression'\nimport { MongoClient } from 'mongodb'\nimport elasticsearch from 'elasticsearch'\nimport graphQLHTTP from 'express-graphql'\nimport cors from 'cors'\nimport Redis from 'ioredis'\nimport serveStatic from 'serve-static'\n\nimport pcgcSchema from './pcgc_schema'\nimport NoIntrospection from 'graphql-disable-introspection'\n\nconst app = express()\napp.use(compression())\napp.use(cors())\n\n// eslint-disable-line prettier/prettier\n;(async () => {\n  try {\n    const mongoClient = await MongoClient.connect(process.env.GNOMAD_MONGO_URL, {\n      useNewUrlParser: true,\n    })\n\n    const elastic = new elasticsearch.Client({\n      apiVersion: '7.6',\n      host: process.env.ELASTICSEARCH_URL,\n    })\n\n    const redisConnectionConfig =\n      process.env.NODE_ENV === 'development'\n        ? { host: process.env.REDIS_HOST, port: process.env.REDIS_PORT }\n        : {\n            sentinels: [\n              { host: 'redis-sentinel', port: 26379 },\n              { host: 'redis-sentinel', port: 26379 },\n            ],\n            name: 'mymaster',\n          }\n\n    const redis = new Redis(redisConnectionConfig)\n\n    app.use(\n      [/^\\/$/, /^\\/api\\/?$/],\n      graphQLHTTP({\n        schema: pcgcSchema,\n        graphiql: true,\n        validationRules: [NoIntrospection],\n        context: {\n          database: {\n            gnomad: mongoClient.db(),\n            elastic,\n            redis,\n          },\n        },\n        customFormatErrorFn: error => {\n          console.log(error)\n          const message =\n            error.extensions && error.extensions.isUserVisible\n              ? error.message\n              : 'An unknown error occurred'\n          return { message }\n        },\n      })\n    )\n\n    if (process.env.READS_DIR) {\n      app.use(['/reads', '/api/reads'], serveStatic(process.env.READS_DIR, { acceptRanges: true }))\n    }\n\n    app.get('/health', (req, res) => {\n      res.json({})\n    })\n\n    app.listen(process.env.GRAPHQL_PORT, () => {\n      console.log(`Listening on ${process.env.GRAPHQL_PORT}`)\n    })\n  } catch (error) {\n    console.log(error)\n  }\n})()\n"],"names":[],"sourceRoot":""}